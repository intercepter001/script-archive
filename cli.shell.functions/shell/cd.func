export CDPATH

# cd functions (uniqpath is in 00_lib*)

alias ..="cd .."
alias tdb='tdir ~/sites/home/database'

# CDPATH and CDPATH annoyances
if [ -n "$_IS_BASH" ]; then
   # . is implied, if set, BAD: does echo on stdout when PATH is used.
   CDPATH=$HOME:$HOME/Desktop:/disk-WRK/proj:$HOME/bin/SCRIPTS.d
   function cd { # suppress stupid PATH pritning if I don't 
                 # need the darn path to find the dir
      typeset i suppress
      for i; do
         [ -n "$CDPATH" -a "$i" != "-L" -a "$i" != "-P" -a -d "$i" ] && suppress=1
      done
      if [ -n "$suppress" ]; then
         builtin cd ${1:+"$@"} >/dev/null
      else
         builtin cd ${1:+"$@"}
      fi
   } 
fi

function mtdir { 
    # echo or
    #_mt_tmp="$(mt_dir -echo "$@")"; 
    #cd "$_mt_tmp" # 2>/dev/null; 

    # eval
    _mt_tmp="$(mt_dir -eval "$@")"
    eval "$_mt_tmp";
}

function tdir { # multi argument cd
   cd "$1"; shift;
   while [ "$1" != "" ]; do cd "$1"; shift; done
}
function md { _p=""; [ "$1" = "-p" ] && _p=-p && shift; mkdir $_p "$@"; cd "$1"; }
function mdkir { mkdir "$@"; }
function rd {
   typeset o_p olddir rc
   [ "$1" = "-p" ] && o_p="-p" && shift
   if [ "$1" = "" -o "$1" = "." ]; then
	 olddir="$PWD"
      rmdir $o_p "$olddir"
	 rc=$?
	 # semantics of "rd . some_dir" is confusing
	 while ! ls -a "$olddir" 2>/dev/null | tail +2 | grep . >/dev/null; do 
	    olddir=`dirname "$olddir"`
	 done
	 cd "$olddir"
   else 
	 rmdir "$1"
	 rc=$?
   fi
   shift
   if [ "$1" != "" ]; then
      rd $o_p "${1:-$@}"
   else
      [ "$rc" = "0" ]
   fi
}


# vim:filetype=sh
