# created     PJ 200907XX jakobi@acm.org
# copyright:  (c) 2009 jakobi@acm.org, GPL v3 or later
# archive:    http://jakobi.github.com/script-archive-doc/

# export CDPATH # do NOT export it, CDPATH is not really suitable for noninteractive use.

# cd functions (uniqpath is in 00_lib*)

alias ..="cd .."
alias tdb='tdir ~/sites/home/database'

# CDPATH and associated annoyances - only unteractive use. if used at all.
# use only for bash only if interactive and add a function to compensate.
# (ksh also offers one btw)
if [ -n "$_DISABLE_CDPATH" ]; then
   unset CDPATH
fi
if [ -z "$_DISABLE_CDPATH" -a -n "$_IS_BASH" -a -n "$PS1" ]; then
   # ./ doesn't seem implied, so we seem to require to add it
   # at the cost of spurious messages from cd

   declare +x CDPATH
   CDPATH="$(uniqpath ".:$CDPATH:$HOME:$HOME/Desktop:/disk-WRK/proj:$HOME/bin/SCRIPTS.d")"

   function cd { # suppress stupid PATH pritning if I don't 
                 # need the darn path to find the dir
      typeset i suppress
      # ensure a dot is in CDPATH - otherwise we may loose 
      # the ability to cd to basename paths in PWD...
      _dot_in_path "$CDPATH" || CDPATH=":$CDPATH"
      for i; do
         [ -n "$CDPATH" -a "$i" != "-L" -a "$i" != "-P" -a -d "$i" ] && suppress=1
      done
      if [ -n "$suppress" ]; then
         builtin cd ${1:+"$@"} >/dev/null || builtin cd ${1:+"$@"}
      else
         builtin cd ${1:+"$@"}
      fi
   } 
fi

function mtdir { 
    # echo or
    #_mt_tmp="$(mt_dir -echo "$@")"; 
    #cd "$_mt_tmp" # 2>/dev/null; 

    # eval
    _mt_tmp="$(mt_dir -eval "$@")"
    eval "$_mt_tmp";
}

function tdir { # multi argument cd
   cd "$1"; shift;
   while [ "$1" != "" ]; do cd "$1"; shift; done
}
function md { _p=""; [ "$1" = "-p" ] && _p=-p && shift; mkdir $_p "$@"; cd "$1"; }
function mdkir { mkdir "$@"; }
function rd {
   typeset o_p olddir rc
   [ "$1" = "-p" ] && o_p="-p" && shift
   if [ "$1" = "" -o "$1" = "." ]; then
	 olddir="$PWD"
      rmdir $o_p "$olddir"
	 rc=$?
	 # semantics of "rd . some_dir" is confusing
	 while ! ls -a "$olddir" 2>/dev/null | tail +2 | grep . >/dev/null; do 
	    olddir=`dirname "$olddir"`
	 done
	 cd "$olddir"
   else 
	 rmdir "$1"
	 rc=$?
   fi
   shift
   if [ "$1" != "" ]; then
      rd $o_p "${1:-$@}"
   else
      [ "$rc" = "0" ]
   fi
}


# vim:filetype=sh
