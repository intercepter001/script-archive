# created     PJ 200907XX jakobi@acm.org
# copyright:  (c) 2009 jakobi@acm.org, GPL v3 or later
# archive:    http://jakobi.github.com/script-archive-doc/

export SHELLDIR _VERBOSE ENV _IS_KSH _IS_BASH _SHELL _OLDSHELL SHNEST _SHELLDIR_LOADED _SHELLDIR_LOADED_PID


# to use a readonly global SHELLDIR and still source
# a local similarly structured setup:
#
# invoke path-to-LOAD to source the readonly SHELLDIR,
# then invoke SHELLDIR="local shelldir" path-to-LOAD 
# (optionally have a symlink to 02_customize.func which
#  will also source account/host specifics)

# LOAD protects against multiple invocations from the
# SAME shell's .profile/.bashrc/... - but it still needs
# to fully parse all files for each shell to provide 
# changed/unexported variables and aliases (unless _SHELLDIR_LOADED*
# is tested in individual files or we mangle LOAD itself)

[   -n "$SHELLDIR" ] && SHELLDIR=${BASHARGV%%/LOAD}
[ ! -d "$SHELLDIR" ] && SHELLDIR=/home/$LOGNAME/bin/shell
[ ! -d "$SHELLDIR" ] && SHELLDIR=/home/jakobi/bin/shell

#_VERBOSE=1



# hack to allow for 'exec bash' to be considered a new shell, assuming
# that _SHELLDIR_LOADED_<number> is UNEXPORTED and undefined on first LOAD
let _SHELLDIR_LOADED_PID=_SHELLDIR_LOADED_$$ # bash: either 0 or $$
if [ "$_SHELLDIR_LOADED" = "$$" -a "$_SHELLDIR_LOADED_PID" = "$$" ]; then
   # we've the same PID and the hopefully unexported var _SHELLDIR_LOADED_<$$>
   # lists our PID (which should be true for neither a new shell via system()
   # nor via exec())
   echo "# LOAD invoked multiple times for shell $$ - skipping."
else
   _SHELLDIR_LOADED=$$
   let _SHELLDIR_LOADED_$$=$$ # sets _SHELLDIR_LOADED_<CURRENT PID> to $$

   # shell detection
   _OLDSHELL=$_SHELL
   _SHELL=${0##*/}; _SHELL=${_SHELL%%-*}
   _IS_KSH=""
   _IS_BASH=""
   [ "$_SHELL" = "ksh" ]        && _IS_KSH=ksh
   [ "$_SHELL" = "pd-ksh" ]     && _IS_KSH=pd-ksh
   [ "$_SHELL" = "pdksh" ]      && _IS_KSH=pd-ksh
   # [ -n "$_AST_FEATURES" ]  && _IS_KSH=ksh # cannot unexport from within profile
   [ "$_SHELL" = "bash" ]       && _IS_BASH=bash
   
   # override only if we can safely guarantee a specific shell
   [ -n "$BASH_ARGV" ]       && _IS_BASH=bash && _IS_KSH="" && _SHELL=bash && SHELL=/bin/bash
   
   if [ -n "${SHELL##*$_SHELL}" ]; then
      echo "# SHELL=$_SHELL FROM $SHELL (\$0=$0)" 1>&2
      SHELL=$_SHELL
   fi
   
   # shell switching and nesting
   [ -n "$_OLDSHELL" -a "$_OLDSHELL" != "Xsession" -a "$_OLDSHELL" != "$_SHELL" ] && SHNEST=$SHNEST-0
   
   # interactive - ensure we have a prompt [no exporting PS1!]
   [ "${-##*i}" != "$-" ] && PS1=${PS1:-'$'}
   
   # only for bash and ksh   
   # ksh sourcing requires at least ./ instead of just the filename
   if [ -n "$_IS_KSH" -o -n "$_IS_BASH" ]; then
      for _SOURCEFILE in $SHELLDIR/*.func; do 
         [ -n "$_VERBOSE" ] && echo "# SOURCE $_SOURCEFILE" 1>&2
         if [ -r "$_SOURCEFILE" ]; then
            . "$_SOURCEFILE"
         else
            echo "# ERROR  $_SOURCEFILE cannot load" 1>&2
         fi
         [ -n "$_VERBOSE" ] && echo "# DONE   $_SOURCEFILE" 1>&2
      done
   else
      : # probably dash - just ignore the poor posixly sick shell
   fi
fi
true

# vim:filetype=sh
