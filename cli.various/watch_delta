eval 'exec perl -Sx $0 ${1:+"$@"}'
   if 0;
#!perl

# I'm really unhappy about busybox's missing -c option
# for netstat on android. So here's something to cope
# with this situation and still permit to 'roughly'
# track ongoing connections:

# $0 [-v] [-i] [-e pattern] ... [--] [command]
# 
# run command repeatedly and report changes 
# (consider e.g. $0 -e FILTER -- netstat -pWn | hlgrep PATTERN > log
#  instead of depending on watch netstat or a mere netstat -c)

my $version="0.1";
# 20120128 PJ        initial version jakobi@acm.org
#
# (c) 2012 PJ, placed under GPL v3
# archive:   http://jakobi.github.com/script-archive-doc/


# NOTES:
# - multiple udp lines can indeed occur with netstat for same process/same port


# BUGS:


use strict;
use vars;
use warnings;

# use modifyable, not yet exported as a cli option
my $o_sort=0;       # set to 1 to always sort line mode output

#
my $o_sleep=1;      
my $o_count=-1;
my $o_negate=0;
my $o_pattern=".";
my $o_highlite="";
my $o_igncase="";
my $o_verbose=0;   
my $o_diff=undef;
my $o_mangle="";
my $o_netstat="";

#
my $errcnt_max=10;  # max ammount of transient failures of command before abort
my ($errcnt,$errcnttotal)=(0,0);
my (@output,%output);
my ($SO,$SE,$evaloutput,$evalprint,$rc,@oldoutput);
my (@e,@H,$vo);
my ($t,$ts,@l);
my (@diffcmd, @diff);
my ($sort_skip);

my $tmpfile="/tmp/watchdelta.$$"; 
unlink $tmpfile; sysopen(FH, $tmpfile, 01|0200|0100) or $tmpfile="/sdcard/watchdelta.$$"; close FH; # android hack
my $tmpfile0=$tmpfile.".old";

$|=1;



while($_=shift @ARGV) {
   /^-e$/         and do { push @e, shift;    next};
   /^-H$/         and do { push @H, shift;    next};
   /^-M$/         and do { $o_mangle=shift;   next};
   /^-v$/         and do { $o_negate="!";     next};
   /^-d$/         and do { $o_diff=shift;     next};
   /^-i$/         and do { $o_igncase="i";    next};
   /^-s$/         and do { $o_sleep=shift;    next};
   /^-n$/         and do { $o_count=shift;    next};
   
   /^-?-verbose$/ and do { $o_verbose++;      next};
   /^-?-sort$/    and do { $o_sort++; $sort_skip=shift if $ARGV[0]=~/^\d+[bc]?$/; next};
   /^-?-netstat$/ and do { unshift @ARGV, qw/-v -e ^unix|^Active|^Proto -M &manglenetstat("") --sort 5/;
                           $o_netstat=1;
                           push @ARGV, qw/-- netstat -anpW/ if not grep {/\A--\z/}@ARGV; next};
   /^-?-netstat-?[lv]$/ and do{
                           unshift @ARGV, qw/-v -e ^unix|^Active|^Proto -M &manglenetstat("long") --sort 5/;
						   $o_netstat=1;
                           push @ARGV, qw/-- netstat -anpW/ if not grep {/\A--\z/}@ARGV; next};

   /^-?-help$/    and do { &usage;            exit};
   /^-?-$/        and do {                    last};
   unshift @ARGV, $_; last;
}
die "!! ERROR: no command specified\n" if not @ARGV;
open(ERR, ">&", \*STDERR);
$o_pattern= "(".join(")|(",@e).")" if @e; @e=undef;
$o_highlite="(".join(")|(",@H).")" if @H; @H=undef;
$evaloutput="\@output=grep{$o_negate/\$o_pattern/o$o_igncase}\@output\n";
if ($o_highlite){
   ($SO, $SE)=(`tput smso 2>/dev/null`,`tput rmso 2>/dev/null`);
   ($SO, $SE)=("\x1b[0;33m","\x1b[0m") if not $SO; 
   $evalprint="\@print=grep{s/\$o_highlite/\$SO\$1\$SE/o$o_igncase;1}\@print\n";
}


my $start=$o_count;
while($o_count--) {
   $t=time; 
   @l=localtime; 
   $ts=sprintf "%04d%02d%02d-%02d%02d%02d",$l[5]+1900,$l[4]+1,@l[3,2,1,0];
   do{print ERR "!! ERROR: too many command errors in sequence\n"; exit 42} if $errcnt_max < $errcnt;
   
   $rc=0;
   open(FH, "-|", @ARGV) or do{$errcnt++; print "!  ERROR during attempt to run command\n"; close(FH); $rc++};
   @output=<FH> if not $rc;
   $errcnt++ if not @output;
   close(FH) and do{$errcnttotal+=$errcnt; @output and $errcnt=0; 1} or $errcnt++;
   $rc=$?>>8 if not $rc;

   if (not $errcnt) {
      @output=grep{/./}@output if not defined $o_diff or $o_sort;
      do{for(@output){eval $o_mangle}} if $o_mangle;
      eval $evaloutput;
      @output=sortfield($sort_skip,@output) if $o_sort;

      if (defined $o_diff) {
         &diffmode;
      } else {
         &linemode;
      }
   }
   
   # first loop - special command sanity handling (also close STDERR now to unclutter display)
   if ($o_count+1 == $start) {
      close STDERR;
      do{print ERR "!! ERROR: errors occured during first execution - aborting ($rc / $errcnt)\n"; exit 42} if $errcnt;

      # print an extra line feed to separate initial run from delta
      print "\n";  
   }

   sleep $o_sleep if $o_sleep; 
}
exit 1 if $errcnttotal;
exit 0;

# ---------------------------------------------------------------------------------------------

sub usage{
   print <<EOF
watchdelta [OPTIONS]                 -- command ...
watchdelta [OPTIONS] -D "DIFFOPTION" -- command ...

Runs command repeatedly and reports all changed lines with timestamps.
The  second  invocation runs the host's diff on  subsequent  command's
output instead of using the builtin tracking of changed lines.


Options:
 -i         ignore case for -H and -e options
 -n N       limit to N iterations                                 ($o_count)
 -s S       sleep S seconds between iterations                     ($o_sleep)
 -v         invert matching for -e option
 --verbose

Filtering options (before computing delta):
 --sort [N] sort command output first    (skipping N [c]hars or words)
 -e RE      regex to select lines                (honors -i, -v, ORed)
 -M PE      mangle each line first using an arbitrary
            perl expression PE                         (ignores -v/-i)

Reporting options:
 -d DOPT    instead of tracking line changes, just diff command output
            using system diff with options DOPT (DOPT: "-wc", "", ...)
			(busybox diff  lacks -c, and makes a broken context diff
			 the default, so just use "-w")
 -H RE      regex to highlight                       (honors -i, ORed)

Laziness options / preconfigured tasks:
 --netstat  prepend -v -e '^unix', add a suitable -M function plus
            optionally append -- netstat -anpW)
 --netstatl adds full commandline output to --netstat


Notes:
 - instead of coping with netstat -c or  watch netstat, you  can get a
   a more useful output by running
      watch_delta --netstat | tee -a log | cut -b-180
   (roughly like watch_delta -v -i 'STREAM|DGRAM' -- netstat -npW) 
   Note that neither  netstat -c  nore above command are able to catch 
   short term connections; this might require inotify or worse...
 - default line mode reports only one line in case of multiple 
   identical lines
EOF
}


# run system diff on current and previous output,
# timestamp the results with a prefixed with +/- 
# from the relevant diff line
sub diffmode {
   my(@print);

   # O_WRONLY|O_CREAT|O_EXCL;  numeric for android sl4a perl instead of use IO:Handle
   unlink $tmpfile0; sysopen(FH, $tmpfile0, 01|0200|0100) or $rc=1; print FH @oldoutput if not $rc; close FH or $rc=1;
   unlink $tmpfile ; sysopen(FH, $tmpfile,  01|0200|0100) or $rc=1; print FH @output    if not $rc; close FH or $rc=1;
   do{unlink $tmpfile, $tmpfile0; print ERR "!  ERROR: cannot write tempfiles $tmpfile\{,0}\n"; $errcnt++; return} if $rc;

   open(FH, "-|", "diff $o_diff $tmpfile0 $tmpfile");
   @print=<FH>;
   close(FH); 
   $rc=$?>>8;
   unlink $tmpfile, $tmpfile0;
   do{ print ERR "!  ERROR: cannot diff\n"; $errcnt++; return} if $rc>1;
   $rc=0;

   # skip diff -c header / busybox diff header
   while(@print and $print[0]=~/^(\*\*\*|---|\+\+\+)\s+\Q$tmpfile\E|^\*{7}/o) {
      shift @print;
   }

   if (@print) {
      # print "\n$ts\n" if @print; 
      my($c,$d);
	  # busybox by default (w/o -c) neglects the space after the flag char, sigh
      @print=grep{s/^(.)/do{$d=$c=$1; $c=" "if not m!^[\+\-\*\<\>\!]! or m!^[\+\-\*\<\>]{2}!;"$c $ts $d"}/e;1}@print;

      eval $evalprint if $o_highlite;
      print @print;
      print "\n";
   }
   @oldoutput=@output;
}


# report changed lines with a +/- prefix
sub linemode { 
   my(@print,@newoutput,@deloutput);
   
   for(@output){
      if (not $output{$_}) {
         push @newoutput, $_;
      }
      $output{$_}=$t;
   };
   for(keys %output){
      if ($t != $output{$_}) {
         delete $output{$_};
         push @deloutput, $_;
      }
   }

   if (@deloutput or @newoutput) {
      do{print "\n"; $vo=0} if $o_verbose and $vo;
      push @print, grep{s/^/- $ts /} sortfield($sort_skip,@deloutput);
      push @print, grep{s/^/+ $ts /} sortfield($sort_skip,@newoutput);

      eval $evalprint if $o_highlite;
      print @print;
   } else {
      do{print "."; $vo++;} if $o_verbose;
   }
}

sub sortfield {
   my($sort_skip)=shift;
   return(@_) if not $o_sort;
   return(sort @_) if not $sort_skip;
   if ($sort_skip=~/^\d+$/) {
      my $n=$sort_skip;
      if ($o_netstat and $sort_skip==5) { # don't do this if user changed sort fields
		 # if we make a mess of this code for the sake of --netstat, then do it properly:
		 # sort processes acc. to proto-type / name / pid / fullproto / connections 
         $n-=2;
         return(sort{my($aa,$bb)=map{my $c=$_; $c=~s/^(...)(..) ((?:\S+\s+){$n})(\d+\s+)(.*)/do{"$1\~\~$5\~\~".(sprintf "%06d",$4)."\~\~$1$2\~\~$3"}/e;chomp $c;"$c"}($a,$b); $aa cmp $bb} @_);
      } else {
         return(sort{my($aa,$bb)=map{my $c=$_; $c=~s/^((?:\S+\s+){$n})(.*)/$2\~\~$1/;                        chomp $c;"$c"}($a,$b); $aa cmp $bb} @_);
	  }
   } 
   if ($sort_skip=~/^(\d+)[bc]$/o) {
      my $n=$1;
      return(sort { my($aa,$bb)=map{my $c=$_; $c=substr($c,$n)."~~".$c;chomp $c;"$c"}($a,$b); $aa cmp $bb} @_);
   }
   return @_; # can't happen
}

# helpers for laziness / preconfigured tasks :)
sub manglenetstat {
   my($opt)=@_;
   my $l=76; # suitable for net-utils on ubuntu 10.04 / 2012-01
   $opt="" if not defined $opt; $opt=" ".$opt." ";

   # restore ipv6-formatted ipv4 to conserve space
   if ($ENV{ANDROID_ROOT}) {
      # make busybox netstat output a bit shorter
      s!::ffff:(\S+)!$1       !go; 
	  s! {31}! !go;
      $l=72; 
	  s!State       PID/!State             PID  !o; 
   }
   
   s!(.*) - *$!sprintf "%-${l}s  %6s",$1,"-"!e; # same as below

   # uncomment next line to suppress RECQ and SENDQ values
   s!^(\S\S\S.. )(\s*\d+\s+\d+\s+)!$1!o and $l=$l-length($2)+3; s!^Proto Recv-Q Send-Q!Proto!;

   # inject long process name and arguments into netstat output
   s!(.*\S) +(-|\d+/.*)\s*\z!do{
      my($f,$pc)=($1,$2);
	  my($p,$c)=($pc,"  -");
	  ($p,$c)=($1,$2) if $pc=~m/^(\d+)(\/\S+)/o;
	  # supply a dummy field in case of udp
      $f=sprintf "%-".($l-12)."s -",$f if length($f)<$l-10 and not $f=~/^tcp/;
	  sprintf("%-${l}s  %6s%s\n", $f, $p, $c);
   }!eo;
   s!(.*\S) +(\d+)(/.*)\s*\z!do{
      my($f,$p,$c,$c0,$ce,$ca)=($1,$2,$3,"","","");
      # $ce=readlink("/proc/$p/exe"); $ce="" if not $ce; $ce=~s/\s*\z//o;
	  if ($opt=~/ long /) {
         open(F,"<","/proc/$p/cmdline") and $ca=<F> and $ca=~s/\0+/ /go; close F; $ca="" if not $ca; $ca=~s/\s*\z//o; 
         $c="  $ca" if $ca;
      } else {
         open(F,"<","/proc/$p/comm") and $c0=<F>; close F; $c0="" if not $c0; $c0=~s/\s*\z//o; 
	     $c="  $c0" if $c0;
	  }
	  $c=~s/ *$//o;
	  sprintf("%-${l}s  %6d%s\n", $f, $p, $c);
   }!eo
}
