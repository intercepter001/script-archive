#!/usr/bin/perl

# sleep until TIMESPECs, optionally triggering a previously defined command after TIMESPEC

my $version="0.1";
# 2008XXXX PJ   0.1  jakobi@acm.org initial version
# 20101115 PJ        obfuscated help
# 20111206 PJ        nicer reporting
#
# copyright:  (c) 2008-2011 jakobi@acm.org, placed under GPL v3 or later 
# archive:    http://jakobi.github.com/script-archive-doc/

# NOTES
# - can cope with the missing space when copying rendered ebay dates
# - instead of use Date::Parse we use GNU date -d, which allows more
#   natural TIMESPECs, and seems both more powerful and more inline
#   with the intended use of $0 as a shell command.

# BUGS
# - [SKIP]  how to permit arbitrary localized date strings or worse, e.g. 
#           mixed German/English dates; currently we just convert
#           month names, but not e.g. YY-MM-DD vs MM/DD/YY et al.
#           or worse, assuming dates are from the user provided in
#           his current locale. Usually wrong if pasted from his browser.
# - [Q]     should -s SEC and -SEC should handle arbitrary timespecs?


$debug=" on "; # noexec nosleep, whatever


$NOW=time;
$warnings=0;
while($ARGV[0]){
   if ($ARGV[0]=~/^(-h|--help|-\?)$/) {&usage; exit 1}; 
   if ($ARGV[0]=~/^--?$/)             {shift;                                last};
   if ($ARGV[0]=~/^-f$/)              {shift; $o_force=1;                    next}; 
   if ($ARGV[0]=~/^-s$/)              {shift; $o_countdown=shift;            next};
   if ($ARGV[0]=~/^-(\d+)$/)          {shift; $o_subtract=$1;                next};
   if ($ARGV[0]=~/^-t$/)              {shift; 
                                       $tmp=shift; # permit vargs use
                                       while($ARGV[0] and $ARGV[0]!~/^[\+\-]/){$tmp.=" ".shift};
                                       &add_timespec($tmp, $o_cmd); 
                                       next };
   if ($ARGV[0]=~/^-c$/)              {shift; 
                                       $tmp=shift; # permit vargs use
                                       while($ARGV[0] and $ARGV[0]!~/^[\+\-]/){$tmp.=" ".shift};
                                       $o_cmd=$tmp; 
                                       $o_cmd="/bin/true" if $o_cmd eq ":"; # bash builtin, thus not in the path w/o bash -c shanigans
                                       next };
   if ($ARGV[0]=~/^-A$/)              {shift; $o_cmd="ALARM";    $o_cmd.=" -m ".quotemeta(shift) if $ARGV[0]!~/^[\-\+]/; next};
   if ($ARGV[0]=~/^-W$/)              {shift; $o_cmd="WHISTLE";  $o_cmd.=" -m ".quotemeta(shift) if $ARGV[0]!~/^[\-\+]/; next};
   if ($ARGV[0]=~/^-O$/)              {shift; $o_cmd="ALERTOSD ". ( $ARGV[0]!~/^[\-\+]/ ? quotemeta(shift) : $0 ); next};
   last;
}
while($ARGV[0]) {
   &add_timespec(shift, $o_cmd);
}
do{ &usage; die "\n!!ERROR: extra or missing arguments!!\n" } if not %event or @ARGV;

print "\n" if $warnings;
printf "# %-10s  %-21s  %-24s  %s\n", "epoch", "time argument", "corresponding date", "command"; # if $debug;
print "# ", "-"x10, "  ", "-"x21, "  ", "-"x24, "  ", "-"x16 , "\n" ; # if $debug;
printf "# %-10d  %-21s  %-24s  -\n",$NOW,"-","NOW" if $debug;
foreach(sort keys %event) {
   $CMD=$event{$_}->{cmd}; $CMD=$o_cmd if not $CMD; 
   $CMD1=$CMD; $CMD1=~s!ALERTOSD!O!; $CMD1=~s!ALARM -m!A!; # shorten usual commands for printing?
   printf main::STDERR "# %-10d  %-21s  %-24s  %s\n", $_, $event{$_}->{timespec}, localtime($_)."", $CMD1 #if $debug;
}
print "\n" if %event; # and $debug;
printf "# %-33s  %-24s  %s\n", "action", "subsequent date and", "command" if %event; # and $debug;
print "# ", "-"x33, "  ", "-"x24, "  ", "-"x16 , "\n" if %event; # and $debug; 


foreach(sort keys %event) {
   $UNTIL=$_;
   $DELTA=$UNTIL-time;
   $CMD=$event{$_}->{cmd}; $CMD=$o_cmd if not $CMD;
   $CMD1=$CMD; $CMD1=~s!ALERTOSD!O!; $CMD1=~s!ALARM -m!A!; # shorten usual commands for printing

   if ($DELTA>0) {
      printf main::STDERR "# sleep   %-10d                 %-24s  %s\n", $DELTA, scalar localtime($UNTIL), $CMD1;
      if ($o_countdown) {
         $len=0;
         while ($DELTA) {
            # due to accumulated delays, the final sleep might be shorter than ORIGINAL_DELTA - n * o_countdown
            $DELTA=$UNTIL-time;
            last if $DELTA<1;

            $s=$o_countdown; 
            $s=$DELTA % $o_countdown if not $len;
            $s=$DELTA if $DELTA < $o_countdown;
            
            if ($DELTA<300) { 
               $tmp=sprintf "# (still ~ %d to go, sleeping %d)", $DELTA, $s; # use seconds below 300s else h:mm:ss
            } else {
               $tmp=sprintf "# (still ~ %d:%02d:%02d to go, sleeping %d)", $DELTA/3600, $DELTA/60%60, $DELTA%60, $s;
            }
            print main::STDERR "\x08"x$len, $tmp;
            $len=length($tmp);

            sleep $s if not $debug=~/nosleep/;
         }
         print main::STDERR "\n" if $len;
      } else {
         sleep $DELTA if not $debug=~/nosleep/;
      }
   }

   print main::STDERR "# system  \"$CMD\"\n";
   system $CMD if $CMD and not $debug=~/noexec/;
   $trc=$?>>8;
   print main::STDERR "# returns $trc\n" if $trc;
   $rc+=$trc;
}

exit $rc;

######################################

sub usage {
   print <<EOF;
sleepuntil [OPTIONS] TIMESPEC+
    or
sleepuntil [OPTIONS] -c CMD -t TIMESPEC -t TIMESPEC -c CMD -t TIMESPEC ...

sleepuntil   -t   sleeps  until  the  specified  TIMESPEC.  For   more
information  on  TIMESPEC  format,  see  -d  option  of  (GNU)   date.
Additional  valid  relative  TIMESPECs  are  +SECONDS,  +MINUTESm,  or
+HHH:MM(:SS).  For TIMESPECs missing day or year part, one day or year
is added if otherwise the event would be in the past.

On wakeup, a default command may be executed; use option -c CMD to set
or  redefine  the command for subsequent TIMESPECs. If necessary,  use
/bin/true  to give a non-empty dummy command - TIMESPECs with  "empty"
commands  execute the default, i.e. the value of the final -c CMD. The
command must terminate in advance of the next TIMESPEC.

Options  -c and -t auto-extend until the next argument starting with +
or  -. Any remaining arguments after option processing are assumed  to
be one full TIMESPEC per argument. 


Options:
  -c CMD    set command to run for _subsequent_ -t TIMESPECs ("$o_cmd"),
            the final CMD is also used for any earlier TIMESPECs without
            associated command.
  -t T      sleeps the difference from the previous TIMESPEC/now until 
            TIMESPEC T.

Further options:
  -s SEC    count down in steps of SEC seconds (fairly verbose, global)
  -SEC      subtract SEC seconds from all subsequent TIMESPEC events
  -f        force TIMESPECs to skip checking/possibly adding 24h

  -A [MSG]  -c ALARM    / -c "ALARM -m '...'"   - loud alarm incl. -O
  -O MSG    -c ALERTOST / -c "ALERTOSD '...'"   - sticky OSD message
  -W [MSG]  -c WHISTLE  / -c "WHISTLE -m '...'" - an audible 'ping'

Examples:
 - sleepuntil    -c ALARM -t 17:00 -t 18:00 # run a script called ALARM
   == sleepuntil -t 18:00 -t 17:00 -c ALARM # at 17:00 and 18:00 o'clock
 - TZ=EST sleepuntil 22:00 # sleep until next 22:00 in timezone EST,
                             (in case of HH:MM or HH:MM:SS formats, it will
                              add 24h if HH:MM is in the past)
                             see also: TZ=MESZ date -d "1:00pm EST" 
                             (MET=MEST=MEZ=MEST, as MEZ incl. ST).
 - sleepuntil "fri 22:00"  # sleep until 22:00 on next friday
 - sleepuntil "+4:30"      # translated to "+4 hours 30 minutes" for date
 - sleepuntil "+20s"       # translated to "+20 seconds" for date

EOF
}

sub add_timespec {
   my ($timespec, $cmd) = @_;
   my ($time, $offset);

   # fix both computer time and original input
   $timespec=~s!\.\s| *, *! !g;                                                    # strip dot and comma (also in print)
   $timespec=~s! (\d\d(?:\d\d)?)(\d\d?):! $1 $2:!;                                 # missing sep between year and hour

   # fix computer time only
   $time=lc $timespec;
   $time=~s! +! !g;
   $time=~s/(^| ):/${1}00:/; $time=~s/:( |$)/:00$1/; $time=~s/:(\d):/:0$1:/;       # cleanup single digit or incomplete time
   $time=~s!(januar|februar|juni|juli)!$1y! and $time=~s/iy//;                     # translate German month names, incl.
   $time=~s!dez(ember)?!dec!; $time=~s!okt(ober)?!oct!; $time=~s!mai!may!; $time=~s/m[äÄ]rz?/mar/; # but enough f GNU date
   
   if ($time=~/[^a-z0-9:,\-\.\+ ]/i) {
      die "ERROR: invalid char in timespec $time";
   }

   # year offset if year is missing: guess it, possibly add a year if otherwise event is in the past
   if ($time=~m!^ *(\d+) *(\D+) +(\d+:)!) {
      $time2=$time; $time2=~s!^ *(\d+) *(\D+) +(\d+:)!do{"$1 $2 ".((localtime)[5]+1901)." $3"}!e;
                     $time=~s!^ *(\d+) *(\D+) +(\d+:)!do{"$1 $2 ".((localtime)[5]+1900)." $3"}!e;
      $epoch=`date -d "$time" +\%s`; chomp($epoch); $epoch=0 if $?; 
      $epoch-=$o_subtract;
      if ($epoch and 0 < $NOW - $epoch) {
         $time=$time2;
         $warnings++;
         warn "WARN:   added one year to $timespec / $cmd: $time\n"
      }
   }; 

   # if it's a pure time string, compute epoch time instead
   # day offset if day is missing and non-relative (no + prefix)
   if    ($time=~/^\d?\d:\d\d(:\d\d)?$/)      { $offset=24*3600 }                  # day is missing: add 1d to past events (unless force)
   elsif ($time=~/^\+?(\d+)s?$/)              { $time="+$1 seconds" }              # further timespecs are relative hh:mm:ss values
   elsif ($time=~/^\+(\d+)m$/)                { $time="+$1 minutes" }
   elsif ($time=~/^\+(\d+)h$/)                { $time="+$1 hours" }
   elsif ($time=~/^\+(\d+):(\d{2})$/)         { $time="+$1 hours $2 minutes" }
   elsif ($time=~/^\+(\d+):(\d{2}):(\d{2})$/) { $time="+$1 hours $2 minutes $3 seconds"};

   #$epoch=str2time($time); # too weak, use gnu date -d instead (permits lc zones, etc)
   # GNU date also handles things like 'next week', ...
   $epoch=`date -d "$time" +\%s`; chomp($epoch); $epoch="" if $?;
   $epoch-=$o_subtract;
   if (not $epoch) {
      die  "ERROR:  timespec invalid:   $time / $timespec";
   } elsif ($offset and $NOW-$epoch>0 and not $o_force) {
      warn "WARN:   added one day to  $timespec / $cmd: $time\n";
      $warnings++;
      $epoch+=$offset
   } 

   if ($NOW-$epoch>5) {
      # 5 sec grace period for busy systems
      $warnings++;
      warn "ERROR: skipping past event $timespec / $cmd: $time\n";
      return
   }
   $event{$epoch}->{timespec}=$timespec;
   $event{$epoch}->{time}=$time;
   $event{$epoch}->{cmd}=$cmd;
}
