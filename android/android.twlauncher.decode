#!/usr/bin/perl -w

# hack to extract twlauncher 'folder' notion and help me in mapping 
# app titles to packages as listed in the database.
#
# to get apk name as probably installed in /*/app, try stripping /.* from 
# column 3 to get the basename of the package, then append .apk, maybe
# with a -number prefix)

# note that this will MISS some apk files incl. e.g. widgets!

# see the shell scrap at EOF for an example of filtering things to 
# check installed apps, their paths and the like

my $version="0.1";
# 20120110 PJ   0.1  jakobi@acm.org initial version based on android 2.3 gingerbread / galaxy note 7000
#
# copyright:  (c)2011 PJ, GPL v3 or later
# archive:    http://jakobi.github.com/script-archive-doc/


use strict 'vars';
use Data::Dumper;
use Encode;
$|=1;

print "# to sort by apk name in vim, use :2,$!sort -t : -k 5\n";

my($file,$verbose);

do{$verbose=1;shift @ARGV} if $ARGV[0] eq "-v";
$file=shift if $ARGV[0];
# try using a relative path instead?
$file = "data/data/com.sec.android.app.twlauncher/databases/launcher.db" if not $file and -r $file;
$file = "data/com.sec.android.app.twlauncher/databases/launcher.db"      if not $file and -r $file;
$file = "launcher.db" if not $file and -r $file;
die "no twlauncher database file (original gingerbread location:\nandroid:/data/data/com.sec.android.app.twlauncher/databases/launcher.db)\naborting\n" if not $file or not -f $file;

# sigh - I utterly refuse to code this sqlite3 3.7.x ugliness in perl proper...
system(qq!cp '$file.journal' '${file}0.journal' 2>/dev/null!);
system(qq!cp '$file-wal'     '${file}0-wal' 2>/dev/null!); 
system(qq!cp '$file-shm'     '${file}0-shm' 2>/dev/null!);
system(qq!cp '$file' '${file}0'!);
system(qq!perl -i.bak -e 'undef \$/;\$_=<>;s/\\A(.{18})../\$1\\x01\\x01/;print' '${file}0'!); 
$file.="0"; 

# get menu-item encapsulated into $apps::apps->{menu_item}
package apps;
use base 'Class::DBI';
apps->connection("dbi:SQLite:$file");
foreach (qw/menu_item
           /) {
   my($eval);
   $eval=
   qq!
      package apps::$_; 
      use base 'apps';
      apps::$_->table('$_');
      apps::$_->columns(All=>qw/*/);
      \$apps::apps{$_}=\\\%apps::$_;
      my \@tmp = ();
      \@tmp=apps::$_->retrieve_all;
      foreach(\@tmp) { 
         \$apps::! . $_  . '{$_->{_id}}=$_; 
      } ';
    eval $eval;
}

package main;
my ($c,$t,@c,%f);

foreach (sort keys %{apps::apps->{menu_item}}) { # first get folders (android twlauncher is non-recursive)
   $c=\%{apps::apps->{menu_item}->{$_}};
   if ( $c->{parent_id} == -1 and not $c->{component_name}) {
      $f{$c->{_id}}=$c->{title};
   }
}
foreach (sort keys %{apps::apps->{menu_item}}) { # the get other items and print them
   $c=\%{apps::apps->{menu_item}->{$_}};
   if ( $c->{parent_id} == -1 and not $c->{component_name}) {
      ;
   } else {
      my $format=$verbose ? "%-20s :: %-40s :: %s\n" : "%s::%s::%s\n";
      # wide chars in terminal output still mess up printf columns, sigh
# looks like apk name is somewhat similar to the component name upto the first slash
      print encode("UTF-8",sprintf $format,  ($f{$c->{parent_id}} ? $f{$c->{parent_id}} : ""), decode("UTF-8",$c->{title}), $c->{component_name})
   }
}

__END__


PS1="#"; . ~jakobi/.bashrc.pj

cd /disk-WRK/projects/milestone/GALAXYNOTE/fs/ARC.TWLAUNCH-TITLE-MAPPING || exit 42

notessh -n tail /data/system/uiderrors.txt
echo "# uiderrors ok?"
echo

# get various package lists and massage them
notescp -p note:/data/data/com.sec.android.app.twlauncher/databases/* .
notescp -p note:/data/system/packages* .
notessh -n pm list packages -f > find.pm # ok, not find ...
notessh -n find /*/app /*/framework/*.apk /mnt/asec/*/*.apk |  egrep -v '^/data/app$|^/system/app$|^/system/framkework|^/mnt/asec$'   | sed -r 's! ->.*!!;s!(-[0-9][0-9]*)?(/pkg)?\.apk$!!' | egrep -v '^\.drm$' | grep . | sort -u > find.app
notessh -n find /*/data |  egrep -v '^/data/data$|^/system/data$' | sed -r 's! ->.*!!;s!(^/[^/]*/[^/]*/[^/]*)/.*!\1!;s!-[0-9][0-9]*\.apk|\.apk!!' | egrep -v '^\.drm$' | grep . | sort -u > find.data

echo "Generating lists (check HIDDEN once in while)"

cat find.pm | sed -r 's/^package://;s!=.*!!;s!-[0-9][0-9]*(/pkg)?\.apk$|(/pkg)?\.apk$!!;s!^/data/|^/system/|^/mnt/asec/!!;s!^data/|^app/|^framework/!!' |sort > packages.pm
cat find.app  | sed -r 's!^/data/|^/system/|^/mnt/asec/!!; s!^data/|^app/!!' | sed -r 's!-[0-9][0-9]*/pkg.apk|/pkg.apk!!' | sort -u > packages.app
cat find.data | sed -r 's!^/data/|^/system/!!; s!^data/|^app/!!' | sort -u > packages.data

# get the packages seen by twlauncher
android.twlauncher.decode    launcher.db > LISTING
android.twlauncher.decode -v launcher.db > VLISTING
cat LISTING | sed 's!.*::!!;s!/.*!!' | sort -u | grep -v '^#' > packages.twlaunch

# replace java package names with package file names as per pm list packages -f
perl -e '@h=`cat packages.twlaunch`; @p=`cat find.pm`;
   for $h (@h){$h=~s/\n//;
      @g=();
      @g=grep{m!=\Q$h\E$! and s!^package:!! and s!=.*!!}@p if not @g;      
      @g=grep{s!(-\d+)?(/pkg)?\.apk$!!;s!.*/!!;1}@g if @g;
      if(@g){print @g}else{warn "!! twlaunch not in pm list packages: >>$h<<\n"}};
' | sort -u > packages.twlaunch2

# and dump the packages NOT shown by twlaunch - useful to clean up once in a while
# this should be old plugins, keys for paid apps, things just offering a receiver
# (like that share-via-http helper) and the like
cat packages.pm packages.app | sort -u > packages.all
cat packages.twlaunch2 packages.all | sort | uniq -u > packages.hidden
perl -e '@h=`cat packages.hidden`; @f=`cat find.app`; @p=`cat find.pm`;
   for $h (@h){$h=~s/\n//;
      @g=();
      @g=grep{m!=\Q$h\E$! and s!^package:!! and s!=.*!!}@p if not @g;      
      @g=grep{m!/\Q$h\E(-\d+)?(\.apk)?$!}@f if not @g;
      @g=grep{s!(-\d+)?\.apk$!!;1}@g if @g;
      if(@g){print @g }else{print "!! not found: >>$h<<\n"}};
' | sort -u > HIDDEN_OR_SYSTEM_INTERNAL

