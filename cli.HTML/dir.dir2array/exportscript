#!/bin/bash

# script to export the 
#   current directory's SRC HTML/. and REPO.*/.
#   to the parent's     DST HTML/. and REPO*/.


# BUGS
# - phtml generation should be make style by checking
#   file dates (which is rather messy both when object style
#   embperl would work, but also with embpexec and the
#   use of the search path)
# =>AVOID for now - regenerate/cpio anyway and let
#   git validate changes instead; we use a forced
#   cpio pmdu / cp -Lpr anyway (just that git suppresses
#   non changes and limits the network transmitted changes
#   to the actual ones. Despite the messed up ctime/...)



# On exporting a hierarchic selection of files
# to github, without using the intermediate local git 
# nor github as native version control system for
# the files in question (using github websites more
# in a dated archive style of use).

# The idea for this script is to have SRC/REPO*/. 
# being a tree # of some files and symlinks to the 
# currently used files. The source is thus a linklayer,
# containing directories which contain the 
# symlinks of files to be exported. To allow for moving
# and changing the linklayer layout, the links should
# be absolute.

# structure for this script:
# SRC: ~/git/github/LINKLAYER/{HTML,REPO*}, dirs containing symlinktrees
# DST: ~/git/github/HTML   -> jakobi.github.com # symlink alias for the git repo
# DST: ~/git/github/REPO*  -> script-archive    # "
#
# actual local git repostories kept in sync with github:
# ~/git/github/jakobi.github.com
# ~/git/github/script-archive 

# This script copies all referenced
# files to the DST trees, and generated documentation
# from the SRC/HTML* trees to DST/HTML*.
#
# For documentation files in SRC/REPO.(*), the
# documentation gets placed in the main doc tree
# DST/HTML/$1-doc in a REPO specific subdirectory.



export msg="$(date +%Y%m%d-%H:%M:%S)"
export  src=~/git/github/LINKLAYER
export sdoc=$src/HTML/script-archive-doc
export srep=$src/REPO.script-archive
export  doc=~/git/github/HTML/script-archive-doc
export  rep=~/git/github/REPO.script-archive
export  doc=http://jakobi.github.com


if [ "$1" = "-m" -o "$1" = "-msg" -o "$1" = "--msg" ];then
   shift
   msg=$msg" - $1"
   shift
fi


export SRC="$PWD"
export DST="$PWD/.."
SKIP3=1


[ ! -f "@LINKTREE" ] && exit 20



echo
echo '# Step 1 - Checking for broken links'
echo '# (do fix or delete from LINKTREE and REPOs)'
find . -type l -xtype l || exit 1



echo
echo '# Step 2 - Check SRC for stop words (4LW/German)'
{
Grep.pm -H -i -r -e '\b(donot|no)exporttogithub\b|\bnogithub\b' */.;                           #ENGLISH-OK
Grep.pm -H -i -r -e '\bfehler|fehler\b|\bnicht|\b(der|das|ein|(eine|diese|jene)(|r|s))\b' */.; #ENGLISH-OK
} | egrep -v '#ENGLISH-?OK' | grep . && exit 2



echo
if [ -z "$SKIP3" ]; then
   echo '# Step 3 -- add previous changes into GIT'
   for i in HTML* REPO*; do
      cd "$DST/$i"
      echo "#   $PWD"
      git add -A .
      git commit -m "export0 on $msg"
      cd "$SRC"
   done
else
   echo "# Step 3 -- skipped"
fi



echo
echo '# Step 4 - Generate Html for HTML* to DST/HTML'
for i in HTML*; do
   cd "$i"
   echo "# cp -Lpr $i -> $DST/$i/."
   # cp -Lpr . "$DST/$i/."
   # find . | egrep -v -e '\.epl$|\.phtm|\.phtml' |\
   find . | cpio -pmdu -L "$DST/HTML/$m/."
   for j in *.phtml */*.phtml */*/*.phtml; do
      k="$(echo "$j" | sed -r -e 's/\.p(html?)$/.\1/')"
      l="$(dirname "$j")";
      [ ! -f "$j" ] && continue
      echo "# embperl $j -> $DST/$i/$k"
      export EMBPERL_PATH="$SRC/$i/$l:$SRC/$i";
      EMBPERL_OBJECT_BASE="$SRC/$i/base.epl" embpexec "$j" > "$DST/$i/$k"
   done
   cd "$SRC"
done



echo
echo '# Step 5 - Generate Html for REPO* to DST/HTML/*'
for i in REPO*; do
   cd "$i"
   m="$(echo "$i" | sed -r -e 's/^REPO\.//')"
   echo "# cpio $i -> $DST/HTML/$m-doc/."
   # there shouldn't be dirs having these end of names...
   find    {*,*/*,*/*/*}{.html,.htm,.phtml,.phtm,.epl,.png,.txt,.css,README} \
           2>/dev/null | \
           cpio -pmdu -L "$DST/HTML/$m-doc/."
   for j in *.phtml */*.phtml */*/*.phtml; do
      k="$(echo "$j" | sed -r -e 's/\.p(html?)$/.\1/')"
      l="$(dirname "$j")";
      [ ! -f "$j" ] && continue
      echo "# embperl $j -> $DST/HTML/$m-doc/$k"
      export EMBPERL_PATH="$SRC/$i/$l:$SRC/$i:$SRC/HTML/$m-doc/$l:$SRC/HTML/$m-doc:$SRC/HTML";
      embpexec "$j" > "$DST/HTML/$m-doc/$k"
   done
   cd "$SRC"
done



echo
echo '# Step 6 - Generate missing index.html pointers in the HTML Tree (w/auto-refresh)'
( cd $DST/HTML; find . -type d | fgrep -v '/.git' | sort -u | while read d; do
     test -f "$d/index.html" && { grep -i '<!--GENERATED-INDEX-TO-REGENERATE-->' "$d/index.html" >/dev/null || continue ;}
     (  cd "$d"
        rm index.html 2>/dev/null
        perl -e '@files=<*>; @files=grep {not /\.phtml$/ and not /^index\.html$/} @files;
                 print "<HTML><HEAD><!--GENERATED-INDEX-TO-REGENERATE-->\n";
                 print qq!<META http-equiv="refresh" content="1;URL=$files[0]">\n! if $#files==0;
                 print qq!</HEAD><BODY>\n!;
                 print qq!<A HREF="$ENV{doc}">HOME: $ENV{doc}</A><hr>\n!;
                 print qq!<h1>Files in this Documentation Directory</h1>\n<ul>\n!;
                 foreach(@files){print qq!   <li><a href="$_">$_</a>\n!};
                 print qq!</ul></BODY></HTML>\n!;
                ' > index.html
     )    
  done     
)



echo
echo '# Step 7 - Generate Google textual link list Sitemap'
( cd $DST/HTML; find . -type f -name '*.html' | sort -u | \
     perl -lpe 's!([^A-Za-z0-9/:\-\.])!"%".uc(unpack("H2",$1))!ge; s!^\.!http://jakobi.github.com!' | \
     cat > sitemap
     cp -f sitemap script-archive-doc/sitemap 
     #perl -lpe 's!([^a-z0-9/:\-]|\.(?!html$))!"%".uc(unpack("H2",$1))!ge; s!^\.!http://jakobi.github.com!' | \
)



echo
echo '# Step 8 -- Copy REPOs to DST/REPO'
for i in REPO*; do
   cd "$i"
   echo "# cp -Lpr $i -> $DST/$i/."
   cp -Lpr . "$DST/$i/."
   cd "$SRC"
done



echo
echo '# Step 9 - Generate markdown README files for REPO.*'
# these kind of files do display e.g. clickable links in the GIT view
for i in REPO*; do
   cd "$i"
   m="$(echo "$i" | sed -r -e 's/^REPO\.//')"
   #find *html */*html */*/*html 2>/dev/null | sed 's![^/]*$!!' | while read d; do
   find */* */*/* -xtype f 2>/dev/null | grep -v -e '\.name$' -e '\.skip$' -e '/README.md$' | \
      sed 's![^/]*$!!' | grep . | sort -u | while read d; do
         # auto-generate missing as symlinks to the uplevel README.md
         # these will be replaced in output tree by the populated versions 
         # (so any markdown README the earlier cp created is replaced)
         [ -e README.md -a ! -e "$d/README.md" -a ! -e "$d/README.md.skip" ] && ln -s "$PWD/README.md" "$d/README.md"
   done
   for j in README.md */README.md */*/README.md; do
      k="$j"
      l="$(dirname "$j")";
      [ ! -f "$j" ] && continue
      echo "# embperl $j"
      export EMBPERL_PATH="$SRC/$i/$l:$SRC/$i";
      embpexec "$j" > "$DST/REPO.$m/$k"
   done
   cd "$SRC"
done



if [ "$1" = "-prep" -o "$1" = "--prep" -o "$1" = "-diff" -o "$1" = "--diff" ]; then
   echo "# you can now check generated html or diff"
   echo "# the repositories -> finishing early"
   echo '# $SRC $DST - $src $sdoc $srep - $doc $rep' 
   echo "# cd \$doc; git diff"
   echo "# cd \$rep; git diff"
   echo "# exec shell"
   exec bash -i
fi



echo
echo '# Step 10 -- Update GIT'
for i in HTML* REPO*; do
   cd "$DST/$i"
   echo "#   $PWD"
   git add -A .
   git commit -m "export1 on $msg"
   cd "$SRC"
done



echo
echo  '11. for DST/REPO* git-push'
if [ "$1" = "-commit" -o "$1" = "--commit" ]; then
   ssh-add -l | grep 'The agent has no identities.' && ssh-add
   ssh-add -l
   for i in HTML* REPO*; do
      cd "$DST/$i" && git push origin master; cd "$SRC"
   done
else 
cat <<EOF
   # run this scrap now or reinvoke with -commit
   for i in HTML* REPO*; do
      cd "$DST/$i" && git push origin master; cd "$SRC"
   done
EOF
fi
