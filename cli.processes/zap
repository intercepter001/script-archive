#!/bin/sh
#!perl # -Sx: line count is one off; -w: tested.
eval 'exec perl -Sx $0 ${1:+"$@"}'
   if 0;

 
# --.--.94 <user> <latest change>
# 05.09.94 domke      (From "Programming Perl", L.Wall, R.Schwartz)
# ........ pj   0.2   various small changes to make it work on hpux,aix,bsd,linux,sunos and solaris
# 06.05.01 pj         fixed no-tty handling for use under rsh/...
# ........ pj   0.3   added display of children (so you know what to kill)
# 23.10.05 pj   0.4   added/folded back renice code
# 09.06.09 pj   0.5   small cleanup
# 02.09.09 pj         added non-zero rc for -l -y, -help, -^ anchoring,
#                     -u + more intelligent PID/PPID/USER/UID detection
# (c) perl artistic licence
my $version="0.5.1";


#========================================================= Variables 1

($me = $0) =~ s#.*/##;
$BSD = -f '/vmunix' || -f "/boot/vmunix";
$psopt  = $BSD ? "-auxww" : "-ef";
$user=$ENV{LOGNAME} if $> > 0; # default to own user for non-root
$anchorpsopt='-eo user,pid,ppid,c,stime,tty,time -o " ^%a"'; # gnu ps only

$sig = 'TERM'; # kill -15

$nice= '+1';   # nice +1
($is_kill=0, $is_nice=0, $is_list=1); # default action is list
if (     $0=~/zap|kill/) {
   ($is_kill=1, $is_nice=0, $is_list=0);
} elsif ($0=~/ls|list|display|grep/) {
   ($is_kill=0, $is_nice=1, $is_list=0);
}



#================================================== Help and Arguments

sub Usage {
  %action=("100", "kill -$sig", "010", "renice $nice", "001", "list");
  $action=$action{"$is_kill$is_nice$is_list"};
  $pattern=join("\n       ","",@ARGV);

  die <<USAGE;

$me [-<SIGNAL> | <NICE-VALUE>] [OPTIONS] PATTERN ...

version $version

Zap  searches  the output of ps for anything matching one of the  perl
regular  expression PATTERNs. Matching processes are presented to  the
user.  To perform the predetermined action (see below), just enter 'y'
(or  'z'), possibly followed by 'enter'. This immediately acts on  the
process and optionally its children. Use 'q' to quit selecting or '^c'
to abort.

Scripting  support: The last line on STDOUT returns the sorted list of
selected  pids.  The  exit  code is  1  if  non-interactively  listing
processes (-l -y) but failing to find a match.


action / personality selection (default for zap is sending SIGTERM):

ACTION <-  NAME CONTAINS    -or-    SWITCHES          DEFAULT  / NOTES
 kill      zap / kill              / -is_(kill|zap)   15;      SIGTERM
 renice    (re)nice             -n / -(is_)(re)nice    1;  (nice -n 1)
 list      ls / list / display  -l / -is_list          0;   (aka -n 0)

!! Do use symlinks to change the script's personality, not switches !!

So  to renice processes, invoke zap by using a symlink like 'prenice'.
NICE  goes from +1 to +19, and you're unable to reduce a process  NICE
value  (root: -19 to +19, anything goes). For nice <1 and >7, zap also
tries  to  run  ionice  if available to set high/low  values  for  the
process  [linux,  requires  >2.6.13 and CFQ IO  scheduler].  For  nice
values > 12, ionice c3 [idle] is used instead of class 2 [best effort,
with  ionice values of 0 or 7]. To interactively select processes  and
print their list of PIDs, use a symlink like plist.

Zap was invoked as "$me" with personality "$action" 
and patterns: >>$pattern<<.


Options:
  +N or N    positive nice value                           (default: 1)
  -N         signal number to send or negative nice value  
  -WORD      send signal WORD                        (default: SIGTERM)

  -l         use personality 'list'                (short for -is_list)
  -n         use personality 'renice'              (short for -is_nice)
  --help     this text (also -h)
  
  -^         anchor ^ to match start of command field     (GNU ps only)
  -a         all processes instead of owned processes (root implies -a)
  -c         display descendants of process          (information only)
  -C         display and *act* on both process AND descendants
  -i         ignore case
  -o OPT     use OPT as ps options instead of defaults  (also add -ww?)
  -p PID	    restrict to process tree rooted at PID, but excluding PID
  -u USER    restrict output to processes owned by matching user / uid
  --not PAT  skip processes matching regex PAT
  -y         assume yes / signal all matching processes without asking


Examples: 
  # mix and match
  zap -o '-eo ppid,user,pid,comm'      # customize ps listing
  zap / zap .                          # matches all processes
  zap -^ ^bash.--login                 # match only start of command
  zap -p PID -c PATTERN                # match only descendants of pid
                                       # plus report their offspring 
                                       # (without including their pids)

  # there's more to life than just SIGTERM
  zap -USR1 dd                         # ask dd for statistics
  zap -n 9 firefox                     # nice 'fox
  zap -l -y '^\\S+ +\\d+ +1 +'         # list orphaned processes
  zap -l -y -a '^(?!.*00:0\\d:\\d\\d)' # list cpu hogs (perl5 only)

  # pipe dreams
  echo UNUSED | echo `zap -l -a -C bash </dev/tty | nl` 
  zap -l -y bash 2>&1 | nl             
  zap -a -l -y apache >/dev/null 2>&1 || \
     printf "To: \$LOGNAME\\nSubject: no apache\\n\\n" | sendmail -t


Bugs:
  - Larry Wall probably won't recognize this offspring of his 
    process killer
  - zap doesn't complain about impossible actions such as killing or
    renicing processes of other users when being non-root, bad signals
    bad nice values or using more than one personality switch
  - zap doesn't know about process groups - but they're rarely 
    useful for interactive process selection...


See also:
  - cpulimit, nice, renice* (*: as used by this script)
  - ionice*
  - traffic shaping (xnetload, wondershaper IF U D [Kb/s], 
                              trickle -d D -u U APP [KB/s])
  - kill, killall, killproc, pgrep/pkill, skill/snice
  - ps, gps/qps/xzap, ps (-edalf|aux) -H*, pstree

USAGE
}


@argv=@ARGV;
while ($ARGV[0] =~ /^-|^\+?\d\d?$/) {
  $_ = shift;
  /^--$/ && last;
  (/^-?-help$/ || /^-H$/ || /^-h$/) && ($help=1, next);
  /^-\^$/                           && ($anchor=1, $psopt=$anchorpsopt, next);
  /^-a$/                            && ($user=undef, next);
  /^-y$/                            && ($yes=1, next);
  /^-c$/                            && ($child=1, next);
  /^-C$/                            && ($child=2, next);
  /^-o$/                            && ($psopt=shift, next);
  /^-u$/                            && ($user=shift, next);
  /^-p$/                            && ($parent=shift, next);
  /^-i$/                            && ($ignorecase='i', next);
  /^-?-not$/                        && ($not=shift, next);
  
  # switch personality: demonic, angelic, or plain boring
  /^-?-is_(zap|kill)$/              &&  (($is_kill=1, $is_nice=0, $is_list=0), next);
  /^-?-(is_)?(re)?nice$|^-n$/       &&  (($is_kill=0, $is_nice=1, $is_list=0), next);
  /^(-?-is_(display|list|ls)|-l)$/  &&  (($is_kill=0, $is_nice=0, $is_list=1), next);
  
  /^\+?(\d+)$/ && ($1<20)           && ($nice= $1, next);
  /^-(\d+)$/   && ($1<20)           && ($sig = $1, $nice= -$1, next);
  /^-([A-Z][A-Z][A-Z][A-Z]?[A-Z0-9]?)$/ && ($sig = $1, next);
   
  die "$me: illegal option: $_\n";
}
&Usage if $help; # exits
die "$me: -y requires PATTERN to be given.\n" if $yes and not @ARGV;
$user='^('.quotemeta($user).'|$>)$' if defined $user and not $user=~/[\.$\(\*\+\[\\]/; #'

if ($anchor) {
   # 5.10-style: s!\^!^.*? \\^(*COMMIT)!
   $not=~s!\^!^[^\\^]*\\^! if $not;
   grep {s!\^!^[^\\^]*\\^!} @ARGV;
}


#========================================================= Variables 2

$col=512;
$pscmd  = "COLUMNS=$col ps $psopt </dev/null 2>/dev/null";

# obtain children via separate ps command?
$pscmd2 = $BSD ? "COLUMNS=$col ps -alx </dev/null 2>/dev/null" : "";

# default fields only if title doesn't help:
$uididx = 1;
$pididx = $BSD ? 3-1 : 2-1;
$ppididx= $BSD ? 4-1 : 3-1;

chomp($ionice=`which ionice 2>/dev/null`);



#========================================================= Script Body

open (PS,"$pscmd |") || die "Can't run $pscmd\n";
$_=$title=<PS>; 
print STDERR $title if not $yes or $yes and $is_list; 

# assume USER/PID/PPID to come early within columns guaranteed to be ONE word
$i=0;
foreach $f (split) { 
   do{$uididx=$i}  if ($f eq "UID" || $f eq "USER");
   do{$pididx=$i}  if ($f eq "PID");
   do{$ppididx=$i} if ($f eq "PPID");
   $i++; 
}
   
while(<PS>) {
   next if defined $user and  not +(split)[$uididx] =~ /$user/o;
   push @PS, $_;
}
close PS;


# just map the ancestry into a data structure
if ($child or $parent) {
   # BSD usually omits PPID, so run another ps if necessary
   if ($pscmd2 eq "") {
      @PPS=@PS;
   } else {
      @PPS=`$pscmd2`; shift @PPS;
      die "Cannot run $pscmd2\n" if not @PPS;
   }
   foreach $cand (@PPS) {
      $cand=~s/\x0d?\x0a//;
      @field = split(' ',$cand);
      $pid   = $field[$pididx];
      $ppid  = $field[$ppididx];
      next if $$==$pid or $$==$ppid; # skip this script + its children
      $cand{$pid}=$cand;            # %cand:  ps output for $pid
      push @{$child{$ppid}}, $pid;  # child{} hash of arrays of direct children
      $parent{$pid}=$ppid;
   }
   foreach $pid ( keys %parent ) {
      $ppid=$pid;
      while ($ppid > 0) {
         $ancestor{$ppid,$pid}=1;
	 $ppid=$parent{$ppid};
      }
   }
}


# prepare tty for interactive input
if (not $yes) {
   $TTYin=$TTYout=$TTY="/dev/tty";
   $TTYCMD=`which tty 2>/dev/null`; chomp $TTYCMD;
   $TTYCMD="/usr/bin/tty" if not $TTYCMD;
   if (-x "$TTYCMD") {
      system "$TTYCMD | grep ^/dev >/dev/null";
      if ($?) {
         $TTYin="&STDIN"; $TTYout="&STDOUT"; $TTY="";
      }
   }
   open (TTYIN,  "<$TTYin")  || "Can't read  $TTYin: $!\n";
   open (TTYOUT, ">$TTYout") || "Can't write $TTYout: $!\n";
   select (TTYOUT);
   $| = 1;
   select(STDOUT);
   $SIG{'INT'} = 'cleanup';
   
   # put Terminal in single-character input mode
   if ($TTY) {
      if ($BSD ) {
         system "stty cbreak <$TTY >$TTY 2>&1";
      }
      else {
         system "stty", '-icanon';   # HP-UNIX
         system "stty", 'eol', ''; # ATTENTION: Control Character
         system "stty", "min", '1';
      }
   }
}


# PJ hmm - why did I eval like that??
# anyway, this is the interactive selection of matching processes
#eval <<'EOF';
foreach $cand (@PS) {
  chop($cand);
  ($user,$pid) = split(' ',$cand);
  next if $pid == $$; # we may list $$, but won't act on it!
  $found = !@ARGV;
  if (not $not   or eval("\$cand!~m{\$not}$ignorecase")) {
    foreach $pat (@ARGV) {
      $found = 1 if eval("\$cand=~m{\$pat}$ignorecase");
    }
  }
  next if (!$found);
  next if ($parent and ( 1 != $ancestor{$parent,$pid} ) );

  if (not $already_warned and $is_kill and not $yes) {
     print main::STDERR "\n### ATTN ### PERSONALITY IS ZAP/KILL\n\n";
     $already_warned=1;
  }
  
  @pidlist=($pid);
  @pidlist=(@pidlist, getpstree($pid)) if $child>1;
  if ($yes and $is_list) {
     print STDERR $cand;
     print STDERR "\n", stringpstree($pid) if $child;
     print STDERR "\n";
     action(@pidlist);
  } elsif (not $yes) {
     print TTYOUT $cand;
     print TTYOUT "\n", stringpstree($pid) if $child;
     print TTYOUT "? ";
     read(TTYIN,$ans,1);
     if (not $TTY) {
	# fallback if insane host tty environment
        $tmp=<TTYIN> if $ans ne "\n";
     } else {
        print TTYOUT "\n" if ($ans !~ /\n/);
     }
     if ($ans =~ /^y|^z/i) { 
        print TTYOUT "\n" if $child;
	action(@pidlist) 
     }
     if ($ans =~ /^q/i) {last;}
  } else {
     print TTYOUT "$cand! y\n";
     action(@pidlist);
  }
}
#EOF


&cleanup2;
print STDERR "selected pids are:\n" if @selected_pids and (not $yes or $is_list);
@set=(); foreach(sort {$a<=>$b} @selected_pids) { next if $last==$_; push @set, $_; $last=$_ }; # sort -u -n
@selected_pids ? print join(" ", @set), "\n" : print "\n";

exit 1 if $yes and $is_list and not @selected_pids;
exit 0;



#========================================================= Subroutines

sub cleanup {
  &cleanup2;
  print "\n";
  exit;
}
sub cleanup2 {
  if ($TTY) {
     if ($BSD) {
        system "stty -cbreak <$TTY >$TTY 2>&1";
     }
     else {
        system "stty", 'icanon';
        system "stty", 'eol', '^@';
     }
  }
}

# perform action on the given process list
sub action {
   @selected_pids=(@selected_pids, @_);
   if(      $is_nice) { # renice is global, not cummulative.
			# also try using ionice if available 
                        # to complement very high/low nice values
      system("renice $nice -p @_");
      if (-x $ionice) { # some ionice actions may require root privs?
         if      ($nice>12) {
            system("$ionice -c3 -p $_")     foreach (@_);  # idle
         } elsif ($nice>7) {
            system("$ionice -c2 -n7 -p $_") foreach (@_);  # best effort low
         } elsif ($nice<1) {
            system("$ionice -c2 -n0 -p $_") foreach (@_);  # best effort hi
         } 
     }
   } elsif ($is_kill and $sig) {
      kill $sig, @_;
   } else {
      ;
   }
}

# print pstree depth first
sub stringpstree { 
   my($ppid)=@_;
   my($pid,$OUT);
   foreach $pid ( @{$child{$ppid}} ) {
      $OUT.="  Child ". $cand{$pid} . "\n";
      $OUT.=stringpstree($pid);
   }
   return($OUT);
};

sub getpstree { 
   my($ppid)=@_;
   my($pid);
   my(@pidlist);
   foreach $pid ( @{$child{$ppid}} ) {
      @pidlist=(@pidlist, $pid, getpstree($pid));
   }
   return(@pidlist);
};



#================================================================= End
# vim:ft=perl
