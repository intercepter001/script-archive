#!/usr/bin/perl

# create or delete files abc, y # and check multiple instances. 
# To make one sleep a bit to block other instances, use a non-null argument.

#do "Flock.pm";
BEGIN{
   do{my $p=$0; $0=~s@[^/]*$@@; unshift @INC, $p};
   unshift @INC,  "$ENV{HOME}/bin", "$ENV{HOME}/bin/perl",  "$ENV{HOME}/bin/perl/Compact_pm"; 
}
use Flock; # Compact_pm::Flock


my($err,@FH);

# this is a test driver rather than a proper module test
# manually vary these to test some cases of interest and check the returns for these cases
system("touch abc y; ln abc def");
($err,@FH)=Compact_pm::Flock::openFH("abc","y"); # "abc", "def",

warn "open err $err, FHs @FH for files abc, y\n";

warn "get shared lock: ". Compact_pm::Flock::flockFH('sh', @FH), "\n";

sleep 300 if @ARGV; # so above shared lock will block locking of other runs of this test

warn "success? excl   lock: ". Compact_pm::Flock::flockFH('ex', @FH), "\n";
warn "success? ex bl -lock: ". Compact_pm::Flock::flockFH('-ex bl',@FH), "\n"; # blocking lock and immediately unlock
warn "success? excl   lock: ". Compact_pm::Flock::flockFH('ex', @FH), "\n"; # I can lock my own locked FH
warn "success? excl   lock: ". Compact_pm::Flock::flockFH('sh', @FH), "\n"; # I can lock my own locked FH
                                                                            # (but only shared when using e.g. a 2nd FH
                                                                            #  with a symlink or even the very same file)
warn "unlock              : ". Compact_pm::Flock::flockFH('-=', @FH), "\n";

