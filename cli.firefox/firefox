#!/bin/bash
{

### Q: relink .firefox each and every time???


# HMMMMM after firefox8, things were slow and X11 was stressed by firefox, even for bg tabs!?
# cgroups? but that was later on?
# cleaning abp filter subscriptions might have been the trick and removing the abp hider?
export MOZ_DISABLE_IMAGE_OPTIMIZE=1
unset  MOZ_DISABLE_IMAGE_OPTIMIZE
# ???
# nvidia-settings -a InitialPixmapPlacement=2 -a GlyphCache=1
# and in X11
# Option "PixmapCacheSize" "300000"
# Option "OnDemandVBlankInterrupts" "True"
#
#     Section "Device"
#    Identifier "Device0"
#    Driver "nvidia"
#    VendorName "NVIDIA Corporation"
#    BoardName "GeForce 9600M GT"
#    Option "UseEvents" "On"              <- ?
#    EndSection
#
# for ATI we might have
# Option "AccelMethod" "EXA"
# Option "AccelDFS" "true"

# trying trunk:
# - unsetting MOZ_DISABLE_IMAGE_OPTIMIZE
# - disable ghostery and a slew of similar stuff
# - reconf abp, disable helper
# - hmmm. maybe the tiling apps and their X interaction as culprit??? [to test]
# - javascript as issue: kleinanzeigen.ebay.de is horrible with a dozen or more tabs
#   80% Xorg, 20% firefox-trunk, even when the tab in question isn't visible or
#   displayed at all - same effect on reload
# - still trunk's way better wrt memory

# DO create .firefox-trunk and .firefox-standard symlinks to .mozilla/.../*default
#    this script will switch the profile symlinks on starting -t / normal firefox

### Q: have it assume -t automatically (-trunk) if there's a trunk
###    but no other running firefox? (obviates changing firefoxstdin et al
###    for a new switch)
###    --> change the is_running check to switch as required
###        plus it should distinguish between 2 running instances
###        in choosing the binary to use

# created     jakobi@acm.org 2004xxxx
# last change jakobi@acm.org 20091128
# copyright: (c) 2004-2009, jakobi@acm.org, GPL v3 or later
# archive:   http://jakobi.github.com/script-archive-doc/


# given URLs on ARGV or STDIN ($0 -stdin), load them into firefox.
#
# as this script is itself called firefox, be sure to point 
# $f / $ft below to your actual firefox.
#
# related scripts:
# - firefoxstdin accepts URLs from stdin and tries to correct
#   pasted incomplete or mail-damaged urls, invoking firefox
#   (this script) for each url in the resulting set. It also
#   acts as wrapper to expand GREP patterns like
#     echo "GREP 'daily ::'   | firefoxstdin
#   which is pretty much the same as
#     firefoxgrep 'daily :: ' | firefox -
#   and a few selected shortcuts in firefox and firefoxstdin
#     firefoxstdin -daily 
#   or including the URLs to scan weekly:
#     firefox -daily -weekly
#
#   if you add new shortcut args like -daily in firefoxstdin, 
#   you can list them in the case statement below to 
#   automatically exec firefoxstdin from this script. 
#   search for 'shortcut args'
#
# - firefoxgrep, firefoxgrephtml, firefoxgrepsqlite
#   contain the code to grep in firefox bookmarks. By
#   default, firefoxgrep returns the urls of matching
#   bookmark entries (the match also considering 
#   parent folders, etc). 
#
# together these scripts supply the missing commandline
# functionality wrt 
# - bookmarks, including 
#   - searching bookmarks and opening matching bookmarks
#   - opening pre-defined selections like -daily above
# - opening tabs for multiple urls
# - thunderbird integration (mailto URLs)


# bug/todo
# - the firefox script itself is still a bash script,
#   farming out any more complicated processing to other
#   perl scripts, resulting in reinvocations and a lot of
#   forks (still cheap compared to mozilla).
#
#   if it were to break in interesting ways, it would be
#   worthwile to make firefoxstdin check $0 and the -stdin
#   options for its original behaviour, and implement the 
#   functionality of the firefox bash script, maybe with
#   a new -grep option thrown in.
#
# - user, display, profile setting options in addition to -sm/-3
#   (note that multiple users' firefoxes on the same display
#    may not work, possibly requiring redirecting the 
#    display of further instances to e.g. VNC 
#    (at least for the same user/uid from multiple 
#     machines to run on the same display))


# notes
# - the new -browser, -new-tab and -new-window options are nice
#   but beware the change of semantics for -no-remote (still
#   starting a new browser, but disabling all remote commands
#   for good)
# - a better replacement might be replacing this set of scripts
#   by basing things around a MozRepl-enabled fine-grained-remote controlable
#   firefox (http://wiki.github.com/bard/mozrepl/)
#   (say using Corion's WWW::Mechanize::Firefox Perl Module as a base)
#   or at least considering File::Mork or Mozilla:: for more robust
#   profile guessing/parsing
# - using multiple profiles at once in a single user:
#   - start the instance in the foreground by
#     firefox -P test -no-remote URLs # or export MOZ_NO_REMOTE=1
#     [both $0 and /usr/lib/firefox/firefox work for this]
#   - use -ProfileManager -no-remote [not -p] to open the chooser
#   - -remote/-ping always accesses the first running instance: any -P PROF
#     is ignored; same problem in $0: it is not forwarding -P switches 
#     to multiple urls e.g. on stdin)
#     [but the not forwarding is also happening with -safe-mode, etc]
#   - set about:config: browser.tabs.loadDivertedInBackground true !
#   - use --no-xshm to fork a separate copy of a browser for an URL instead of 
#     loading the url into the existing browser
# 
#   because of the above problems, we do not test for -P options in
#   this script, but rather forward all arg lists starting with 
#   unknown options like -P to firefox (or firefox3).


# Related:
# http://www.cs.indiana.edu/~kinzler/webrowse/ - cutbuf / inbrowse / webbrowse


# default profile to rotate
PROF=$HOME/.firefox

# variables with user settings 
t=thunderbird
# open a suitable profile with -profilemanager (i.e. run firefox-trunk -profilemanager first)
ft=/usr/bin/firefox-trunk
ft=$(which -a firefox-trunk | grep -v -- $0 | head -1)
[ "$ft" = "" ] && ft=/usr/bin/firefox-trunk
f=$(which -a firefox | grep -v -- $0 | head -1)
[ "$f" = "" ] && f=/usr/bin/firefox
fs=/usr/bin/mozilla                # 64bit
#fs=/usr/local/seamonkey/seamonkey # 32bit official build - currently FAIL

fl=$HOME/.firefox.log   # for this session: $fl, $fl.url

#nice="ionice -c2 -n6 nice -7"
nice="nice -7"
test -x $HOME/bin/wrapcgroup && wrapcgroup -std -name browser $$

sync="" # "" or "--sync" in case of X issues

export DISPLAY=${DISPLAY:-:0}

# internal variables
pingcnt=0
test ! -f $f  &&  f=/usr/local/bin/firefox
test ! -f $f  &&  f=/usr/local/firefox/firefox
test ! -f $ft && ft=/usr/local/bin/firefox-trunk
test ! -f $ft && ft=/usr/local/firefox/firefox-trunk
export firefox_to_start=-1;
export thunderbird_to_start=-1;



# functions

function checkfirefox {
   firefox_to_start=1
# BUG check fully fails for seamonkey, and trunk version isn't done by the version guessing
   firefoxversion=${f##*-}; [ "$f" = "$firefoxversion" ] && firefoxversion=""
   firefoxversion=$firefoxversion'([0-9][0-9]*)?(\.[0-9][0-9]*)?'
        firefoxps="$(ps -wwfu `whoami` | grep -v grep | egrep -e '[ /]firefox-bin' -e "/usr/lib/firefox[^ /]*/firefox( |$)" -e "firefox-?$firefoxversion/firefox")"
   firefoxtrunkps="$(ps -wwfu `whoami` | grep -v grep | egrep -e '[ /]firefox-trunk-bin' -e "/usr/lib/firefox[^ /]*/firefox-trunk( |$)" -e "firefox-trunk-?$firefoxversion/firefox")"
   [ "${firefoxps}" != ""      -a "$f" != "$ft" ] && firefox_to_start=0
   [ "${firefoxtrunkps}" != "" -a "$f"  = "$ft" ] && firefox_to_start=0
   [ "${firefoxtrunkps}" != "" -a "$firefoxps" = "" -a "$ft" != "$f" ] && f="$ft" && echo "# switching command to already running firefox-trunk" && firefox_to_start=0
   [ "$firefox_to_start" = "1" ] && echo "# starting $f."
}

function _f {
   [ "$firefox_to_start" = "-1" ] && checkfirefox
   if [ "$firefox_to_start" = "1" ]; then

# BUG rotates wrong profile for seamonkey

      if [ "$f" == "$ft" ]; then
         [ ! -L ~/.firefox-default -a -L ~/.firefox ] && mv ~/.firefox ~/.firefox-default
         [ -L ~/.firefox-trunk -a ! -L ~/.firefox ]   && mv ~/.firefox-trunk ~/.firefox
      else
         [ ! -L ~/.firefox-trunk -a -L ~/.firefox ] && mv ~/.firefox ~/.firefox-trunk
         [ -L ~/.firefox-default -a ! -L ~/.firefox ]   && mv ~/.firefox-default ~/.firefox
      fi

      [ ! -L ~/.firefox ] && echo "no profile" && exit 42

      export P=$PROF/prefs.js; export B=$PROF/places.sqlite; export S1=$PROF/session.rdf; export S2=$PROF/sessionstore.js;
      cp -f  $B.1  $B.2 2>/dev/null; cp -f  $B  $B.1  # bookmark backup
      cp -f  $P.1  $P.2 2>/dev/null; cp -f  $P  $P.1  # prefs backup
      cp -f $S1.1 $S1.2 2>/dev/null; cp -f $S1 $S1.1  # sessions
      cp -f $S2.1 $S2.2 2>/dev/null; cp -f $S2 $S2.1  # sessions

      firefox_to_start=0
      echo    $f '"'"${1:+$@}"'"'
# removed -no-remote (seems to disable remote access incl. ping, ... from version 9 onwards)
      ( (echo; date) >> $fl.url; $nice $f ${1:+"$@"} > $fl 2>&1 </dev/null ) & # start firefox

echo "#START  $f ${1:+$@}"
      _sleep 8; _ping $f; _sleep 4
   else
      # always ping, there's a problem with resolver timeouts?
      if _ping $f || { _sleep 2; _ping $f ;} ; then # or use mozilla remote?
         # restart the command in case of some strange async X problem 
echo "#TRY    $f $sync -noraise -remote 'openURL($1,new-tab)'"
# FIREFOX 11: this is complemented by -new-tab $1
# FIREFOX  9: nothing at all is working: X is dead busy bc background tabs,
#             no -remote at all, cannot find window, cannot do anything
# FIREFOX  8: worked.
         # and another thank-you to NVIDIA
         $f $sync -noraise -remote "openURL($1,new-tab)" 2> >(grep -v -e 'Xlib: *extension "RANDR" missing' -e 'GLib-WARNING.* g_set_prgname' -e '^ *$') ||\
         { _sleep 2;_ping $f && $f $sync -noraise -remote "openURL($1,new-tab)" 2> >(grep -v -e 'Xlib: *extension "RANDR" missing' -e 'GLib-WARNING.* g_set_prgname' -e '^ *$') ;}||\
         echo "#FAILED"
         _sleep 1
      else
         echo "#ERROR  cannot ping - skipping $1"
      fi
   fi
}

function _sleep {
   [ "$noexec" = "" ] && sleep $1
}

function _t {
   if [ "$thunderbird_to_start" = "-1" ]; then
      thunderbird_to_start=1
      ps -u `whoami` | egrep -e thunderbird-bin -e thunderbird > /dev/null && thunderbird_to_start=0
   fi
   if [ "$thunderbird_to_start" = "1" ]; then
      # should we open the inbox by default, too?
      $nice $t    "${1:+$@}" >/dev/null 2>&1 </dev/null &
      echo    $t '"'"${1:+$@}"'"'
      thunderbird_to_start=0
      _sleep 2; _ping $t; _sleep 2
   else
      if _ping $t ; then
         # avoid the remote stuff for now, otherwise we'd need to 
         # translate from cli to the three working tb-specific remote cmds
         $t -noraise "${1:+$@}" # new-window or new-tab
         echo $t -noraise "'""${1:+$@}""'"
         _sleep 1
      else
         echo "cannot ping - skipping $1"
      fi
   fi
}

function _ping {
   i=10; 
   [ "$pingcnt" -eq "0" ] && i=20 # allow longer startup time?
   let pingcnt=pingcnt+1
   while ! { _ping2 "$1"  && _ping2 "$1" ; } ; do
      sleep 1; let i=i-1
      [ "$i" = "0" ] && echo "cannot ping $1 instance" && exit 1;
   done
}
function _ping2 {
   # gee thanx, for nice and uptodate regular driver updates,  NVIDIA. NOT.
   # ? set -o pipefail
   "$1" $sync -remote "ping()" >/dev/null 2> >(grep -v -e 'Xlib: *extension "RANDR" missing' -e 'GLib-WARNING.* g_set_prgname' -e '^ *$')
}

function _decode {
   print MAIN::STDERR "NOT YET IMPLEMENTED"; exit 20;
}

function _encode {
   # leave encoded %XX and # alone!
   # for some cases, try decoding quoted printable 
   # to avoid this, encode = by using %3D (need to try both urls instead?
   # -> change to return 1 word or multiple words,
   # then invoke action for each of the possible encoding we&encode_semantics return?)
   perl -e '$_=shift; "SECURE:OK";
         s/([^A-Z0-9\/:\-_+\.;=\?\&\%\#])/do{sprintf "%%%02X",ord($1)}/gei; # for now, no ',' here
         print' "$1"
}

function _encode_semantics {
   case "$1" in
      http://*|https://*|file:/*|ftp://*) 
         _encode "$1" ;;
      *)
         if [ -f "$1" -o -d "$1" ]; then
	    if [ "${1#/}" != "$1" ]; then # leading / - absolute path
               _encode "file://localhost$1"
	    else
               _encode "file://localhost$PWD/$1"
	    fi
         else
            _encode "http://$1"
         fi ;;
   esac
}

function _browsefile {
   echo "$1" >> $fl.url
   case $1 in
      -mail)                _t                 ;;
      -news)                _t -news           ;;
      mailto:*)             _t -compose `_encode "$1"` ;;
      news:*)               _t -news `_encode "$1"`    ;;
      http://*|https://*|file:/*|ftp://*) 
                            _f `_encode_semantics "$1"` ;;
      *@*)                  if [ ! -r "$1" ]; then 
                               _t -compose `_encode "mailto:$1"`
               			    else
			                      _f `_encode_semantics "$1"`
			                   fi ;;
      *)                    _f `_encode_semantics "$1"` ;;
   esac
}



export pre_opt noexec
while [ "$1" != "" ]; do
   case "$1" in
      # should go first...
      -n|-no-exec)                 shift; noexec="-n"; f="/bin/echo No-Exec"; t=$f ;;

      -t)                          f=$ft; pre_opt="-t  $pre_opt"; echo "do consider starting firefox-trunk -profilemanager manually first"; shift ;;
      -sm|-sea|-seamonkey)         f=$fs; pre_opt="-sm $pre_opt"; shift
                                   firefox_to_start=1
                                   ps -u `whoami` | egrep -e seamonkey-bin   -e seamonkey > /dev/null && firefox_to_start=0
                                   ;; 
      
      # exit with suitable test status code
      -procall)                    ps -ef | egrep -v egrep | egrep -e 'firefox*/firefox' -e thunderbird -e firefox-bin -e 'firefox.*-bin' -e mozilla; exit $? ;;
      -proc)                       ps -ewwo user,pid,ppid,nice,pri,vsize:7,rssize:7,tty:6,start,pcpu,pmem,time,cmd | grep -E -i 'firefox[-]bin' ; exit $? ;;
      -watch)                      exec watch --interval=10 "ps -ewwo pid,vsize:7,rssize:7,pmem,time,cmd | grep -E -i 'firefox[-]bin'" ;;
      -kill)                       killproc firefox-bin ; exit $? ;; 
      -ping)                       $f -remote "ping()"; exit $? ;;
      -ping-tb)                    $t -remote "ping()"; exit $? ;;

      # consider these to begin the list of urls [being handled in _browsefile]
      -mail|-news)                 break ;;

      # options invoking firefoxstdin/bookmark processing from CURRENT DEFAULT BROWSER
      # (optionally loading the results in the requested browser (note that we first
      #  get the full set of bookmarks before opening the first tab; to use a specific 
      #  browser's bookmarks, use firefoxstdin/firefoxgrep directly against that browser)
                                   # firefoxgrep -i -w -U -k "$1" "$2" | firefoxstdin; shift; shift ;;     
      -k|-kw|-key|-keyword)        shift; 
                                   [ "$pre_opt" = "" ] && firefoxstdin $noexec -key  "$1" "$2" || \
                                                          firefoxstdin -n -key "$1" "$2" | firefoxstdin $noexec $pre_opt /dev/stdin
                                   shift; shift ;;
      -grep)                       shift; 
                                   [ "$pre_opt" = "" ] && firefoxstdin $pre_opt $noexec -grep "$1" || \
                                                          firefoxstdin -n -grep  "$1" | firefoxstdin $noexec $pre_opt /dev/stdin
                                   shift ;;  # use ::$1:: to match full fields when grepping
      

      # all further options exec() or exit() instead of processing further args in $0
      
      # *switch* to firefoxstdin
      -|stdin|STDIN|-stdin|-STDIN) shift;  exec firefoxstdin ${1:+"$@"} ;;
      
      # add your shortcut args below -- case patterns do not expand vars :(
      -example|-daily|-weekly|-nightly|-monthly*|-news.daily|-jobs.daily|-job.daily|-job.nightly|-jobs.nightly)  
                                   tmp="$0.$1";
                                   if [ -x "$tmp" ]; then    # execute if -x
                                      "$tmp"
                                   elif [ -f "$tmp" ]; then  # treat as input for firefoxstdin (incl. its GREP commands, etc)
                                      cat "$tmp" | firefoxstdin $noexec $pre_opt
                                   else                      # otherwise assume its a firefoxstdin option
                                      [ "$pre_opt" = "" ] && firefoxstdin $noexec "$1" || \
                                      firefoxstdin -n "$1" | firefoxstdin $noexec $pre_opt /dev/stdin
                                   fi; shift ;;     

      -*)                          exec $f "${1:+$@}" ;; # firefox options
      +*)                          exec $f "${1:+$@}" ;; # firefox options
  
      *)                           break ;;               
   esac
done

[ "$firefox_to_start" = "-1" -a "$#" = "0" ] && checkfirefox
if [ "$firefox_to_start" = "1" -a "$1" = "" ]; then
   ( (echo; date) >> $fl.url; _f; ) & 
   exit 
fi



for opt in "$@"; do
   _browsefile "${opt##+}"
   # now check if the URL looks like it is pasted from a quoted-printable
   # mail body, and pass a de-mangled version to browsefile once again
   # hint: to avoid this duplication of tabs in case of a valid =3D, etc:
   #       replace = by %3D 
#   tmp=$(perl -e '
#         $_=shift; "SECURE:OK";
#         if (/=2E|=3D/i) {
#            s/=([0-9A-F]{2})/pack(C,hex($1))/gei; 
#            s/([\x60\x22\x27\x21])/do{sprintf "%%%02X",ord($1)}/gei; 
#            print
#         }' "$opt");
#   if [ "$tmp" != "" -a "$tmp" != "$opt" ]; then
#      _browsefile "$tmp"
#   fi
done

exit 
}
