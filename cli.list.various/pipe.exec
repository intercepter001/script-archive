#!/usr/bin/perl

# ... | $0 [OPTIONS] [COMMAND ...]
# conditional tests and command execution on pipe contents, optionally
# using tempfiles instead of stdin for more obnoxious commands

my $version="0.1.2";
# created     PJ 200908XX jakobi@acm.org
# last change PJ 20120129 added grep-conditions (-e/-i/-v) and -I{} tempfile 
#                         injection for programs unable to use stdin or <(...)
#
# copyright:  (c) 2009 jakobi@acm.org, GPL v3 or later
# archive:    http://jakobi.github.com/script-archive-doc/


# for use in pipes / conditional execution if data available:
# type 1) $0 [options] command...  -- conditionally pipe-execute command (w/o intervening shell) EXOR just forward contents
# type 2) $0 [options]             -- conditionally set return-code AND forward contents
#
# usage examples:
# - grep foo LOG |   pipe.exec         mutt -s "ALERT - log contains matching terms" $LOGNAME  # example 1 type 1 - mail on match
# - grep foo LOG | { pipe.exec || echo "no matches"; } | mutt -s "daily log summary" $LOGNAME  # example 2 type 2 - mail always (also: inject data in empty pipe)
# - ... | (echo "# please check these lines"; echo; cat - ) | pipe.exec --ignore-header gvim - # example 3 type 1 - display data in editor if any
# - cat LOG | pipe.exec -e httpd && cat   /var/log/apache   | gzip > ARCHIVED_LOG.$(date +%s)  # example 4 type 2 - pass thru content and use of grep return code to inject a file
# - cat LOG | pipe.exec -e httpd    cat - /var/log/apache   | gzip > ARCHIVED_LOG.$(date +%s)  # example 5 type 1 - conditional program execution to inject a file (same result as above)
# - ... | pipe.exec -I{} OBNOXIOUS_COMMAND {} {}.OUT                                           # example 6 tipe 1 - using tempfiles a la find -exec / xargs -I{}


# options:
# --help

# mutually exclusive options are:
# -ih aka -ignore-headers           data availability is determined after stripping initial
#                                   whitespace and #-comment lines. No output (suppressing 
#                                   initial whitespace and initial #-comment lines) nor 
#                                   command execution if no real data
# -ip aka -ignore-headers-but-print similar, but in case of no-data/suppressing command execution,
#                                   we still print initial whitespace and #-comment-lines to stdout
# -i / -e / -v                      specify a grep condition to run command (otherwise substitue cat)
#                                   or filter input to determine "no_data"-status

# additional options if a command is specified:
# -I... / -I ...                    for type 1 commands, use a tempfile and substitute any sequence
#                                   ... with the name of the tempfile for each command argument.
#                                   (replacement string must occur at least once)


# BUGS
# - DEL/QQQ what's to be the expected output for the combination of -e and one of -ih|-ip?


$ARGV[0]=~/^-?-help/o and die <<EOF;
...|  pipe.exec [-ih|-ip|-e RE/-v/-i] [[-I{}] COMMAND ..."nl {} > {}.o"] |...
...|{ pipe.exec ... && ... || ... ;}                                     |...
    a conditional pipe- injection/-rc/-command and stdin2tempfile wrapper
EOF

undef $/; 
$_=<main::STDIN>;
$no_data=1 if $_ eq "";

while(@ARGV) {
   # -ih: during testing, ignore initial white-space/#-comments of the pipe contents
   $ARGV[0]=~/^-ih$|^-h$|^-?-(ignore[-_])?head(ers?)?/o and do{
      m! \A (?: \s*\z | (?: (?:[\t ]* (?:\#.*)?) [\r\n]+ )* ) ([\S\s]?) !x and $no_data=("" eq $1); 
      shift; next
   };
   # -ip: similar, but retain them in pipe contents
   $ARGV[0]=~/^-ip$|^-hp$|^-?-(ignore[-_])?head(ers?)?[-_]but[-_]print/o and do{
      m! \A (?: \s*\z | (?: (?:[\t ]* (?:\#.*)?) [\r\n]+ )* ) ([\S\s]?) !x and $no_data=("" eq $1); 
      $print=1;
      shift; next
   };
   # extra grep filter condition to cat / run command for type 1 
   $ARGV[0]=~/^-i$/o and do{$o_cond_igncase="i";shift; next};
   $ARGV[0]=~/^-v$/o and do{$o_cond_negate=1;shift; next};
   $ARGV[0]=~/^-e$/o and do{shift;$o_cond_expr=shift;next};
   # tempfile creation with xargs-style multiple filename injection
   $ARGV[0]=~/^-I(.*)$/o and do{shift;$o_tmpfile=$1;$o_tmpfile=shift if not length($o_tmpfile);next};
   last;
}
do{pop @ARGV; warn "# pipe.exec -I$o_tmpfile: trailing ';' stripped - we are NOT 'find'.\n" } 
   if $#ARGV>1 and $ARGV[$#ARGV] eq ';' and $o_tmpfile;


# grep filter (resets results of -ih/-ip)
if ($o_cond_expr) {
   $matching=/(?$o_cond_igncase:$o_cond_expr)/o;
   if ($matching and $o_cond_negate or not $matching and not $o_cond_negate) {
      $print=$no_data=1; 
   } else {
      $no_data=0; # reset flag
   }
}


# forward pipe contents / run command
                                   #  type/cmd:input   - output on stdout                     - return code - note
                                   # -----------------   -----------------------------------    -----------   ----
if      (not @ARGV and $no_data) { # 2 -       no data - none (or -ip: just headings if any)  - false         both -e and -ih/-ip can set the no_data flag (options mutually exclusive)
   print $_ if $print; exit 1;
} elsif (not @ARGV) {              # 2 -       data    - print data on stdout                 - true
   print $_;           exit 0;
} elsif ($no_data) {               # 1 -  cmd  no data - none (or -ip: just headings if any)  - true          skip command run; see example 2 on executing / modifying contents on empty pipe
   print $_ if $print; exit 0;
} else {                           # 1 -  cmd  data    - pipe data to cmd                     - cmd rc
   if (defined $o_tmpfile) {
      $tmpfile=`tempfile -p pipx.`; $tmpfile=~s/\s*\z//;                   # safe and official or
      do{$tmpfile="/tmp/pipeexec.$$";unlink $tmpfile} if not $tmpfile;     # home cooking if no debianutils
      die "# pipe.exec: cannot get tempfile - dying.\n" if $? or not $tmpfile;
      $cmd=shift @ARGV; map{s!$o_tmpfile!$tmpfile!go and $cnt++,$_}@ARGV; unshift @ARGV,$cmd;
      die join(" ","# pipe.exec: cannot substitute $o_tmpfile patterns for command", @ARGV, "- dying.\n") if not $cnt;
      open(FH,">",$tmpfile) and print FH $_ or do{unlink $tmpfile; die "# pipe.exec: cannot open file $tmpfile - dying.\n"}; close FH;
      warn join(" ","# pipe.exec: running", @ARGV,"\n") if $verbose;
      system(@ARGV); $rc=$?>>8; unlink $tmpfile; exit $rc;
   } else {
      open(FH,"|-",@ARGV) and print FH $_; $rc=$?; exit $rc>>8 if $rc;
      close FH;                            $rc=$?; exit $rc>>8 if $rc;
   }
   exit 0;
}
