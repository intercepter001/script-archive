#!/usr/bin/perl -i.bak -0777p

my $version="0.1";
# 20090813 PJ   0.1  jakobi@acm.org initial version
#
# copyright:  (c)2009 jakobi@acm.org, placed under GPL v3 or later 
# archive:    http://jakobi.github.com/script-archive-doc/


# line.replace [-c|-C] [--ungrep] LINENO STRING LINENO STRING ... FILE
#
# basic single-line line editing as shell command, complementing 
# grep -v, grep, selectlines, cat >> file and echo >> file, 
# but more trivial and log-able than sed expressions or
# perl -i.bak commands. 
#
# If you want more than single line edits and don't care about
# readility of a command log, consider going perl proper, 
# maybe still as a perl -0777 -i.bak one liner, 
# Grep.pm | sed | Grep.xchange or ped (a full perl variant on sed).
# Or just sed -i.bak w or w/o --follow-symlinks.  (though ped
# is probably preferable; note that perl -i.bak still lacks that 
# option on how-to-(not)-break links when used inline)
# The = and the REGEX location are probably
# already too much for the intended readability of the command.
#
# Use line.print to first report the lines which this script
# later on will change. -ungrep strips a string:number:-prefix
# from insertion/replacement strings. -c/-C take the first or
# second ':' separated string as LINENO. 
#
# For simple replacements, grep -n ... FILE > GREP 
# generates already suitable arguments for line.replace -c:
# f2a < GREP to load the lines into the shell array $f2a, then
# just line.replace -c "${f2a[@]}" FILE. To replace the last
# match, thus say 
#   grep -n MATCH | tail -1 | sed -e s/MATCH/SUBST | f2a
#   line.replace -c "${f2a[@]}" FILE
#
# LINENO:  N     - string is replacement line
#         +N     - string is inserted as line before line
#          N+    - string is inserted as line after  line
#         =N     - string is evaluated at line (do mind the trailing / of s/R/S/)
#                  example: =2 s/^/#/ turns line 2 into a comment
#         -N     - delete line
# N:      digits - line number
#         $      - last line
#         NUMBER/REGEX/ or /REGEX/ (only if -c/-C not specific)
# 
# Each N must be unique. For string insertion and
# replacement, the string {<BACKSLASH>n} is replaced by a newline.
# If multiple REGEX match, a random one is with its [+=-] flags 
# is chosen.
#
# Note that both sed -i.bak and perl -i.bak break both symlinks 
# and hardlinks...
# (edit.ped/ped doesn't do this and as a bonus adds flock locking).

use strict;
use vars;
use warnings;
our($compact,$ungrep,$i,$j);
our(@n,%flags,%n,%l,%once,%match);
our($n,$l,$e,$m);

BEGIN{
   $compact=0;
   while(@ARGV){
      $ARGV[0]=~/^-?-c(ompact)?$/ and do{$compact=1;shift;next};
      $ARGV[0]=~/^-C$/            and do{$compact=2;shift;next};
      $ARGV[0]=~/^-?-ungrep$/     and do{$ungrep=1;shift;next};
   last};
         
   @n=@ARGV;pop @n;@ARGV=($ARGV[$#ARGV]);
   while(@n){
      $i=shift @n;

      # arg combines LINNO and replacement - extract+unshift
      if ($compact==2) {$i=~s/^.*?:(?=([\+\-=]?\d+[\+]?):)//g or die "invalid compact argument $i\n";}
      if ($compact) { # compact N:string instead of N string
         $i=~s/^([\+\-=]?\d+[\+]?)://g or die "invalid compact argument $i\n";
         unshift @n, $i;
         $i=$1;
      }

      # parse insert/etc from number
      $j=$i; $j=~s/\A[\+\-=]|\+\z//;
      if ($j=~/\A(\$|\d+)\z/) { # numeric
         $n{$j}=$i;
      } elsif ($j=~/^(\$|\d+)?\/(.*?)\/?$/) { # regex location
         if($1) {
            $once{$2}=$1; 
         } else {
            $match{$2}=1;
         }
         $j=$flags{$2}=$i;
      } else {
        die "invalid LINENO $i\n";
      }

      # get the replacement
      if ($i!~/^-/) { # next is the substitution (unless we delete)
         $l{$j}=shift @n;
         die "missing argument\n" if not defined $l{$j};
      }
   }
   if($ungrep){
      foreach(keys %l){
          $l{$_}=~s/^.*?:\d+:// or die "not a grep prefix\n";
      }
   };

#print main::STDERR "once = ";for(sort keys %once ){print main::STDERR " $_:$once{$_} " };print main::STDERR "\n";
#print main::STDERR "match= ";for(sort keys %match){print main::STDERR " $_:$match{$_} "};print main::STDERR "\n";
#print main::STDERR "flags= ";for(sort keys %flags){print main::STDERR " $_:$flags{$_} "};print main::STDERR "\n";
#print main::STDERR "n    = ";for(sort keys %n    ){print main::STDERR " $_:$n{$_} "    };print main::STDERR "\n";
#print main::STDERR "l    = ";for(sort keys %l    ){print main::STDERR " $_:$l{$_} "    };print main::STDERR "\n";
   # MAGIC <> INSECURE MESS - AFAICS safe as i.bak for both -| and |- types 
};


my @lines=split /\n/, $_;
my (@out,%test);
#warn "$ARGV - len ".length($_)." lines $#lines\n";
if (%once) {
   for(sort keys %once){
      if ($once{$_} eq '$') {
         $test{$_}=0;
      }
   }
}
if (%test) {
   for($.=0;$.<=$#lines;) {
      $_=$lines[$.++];
      for $m (keys %test) {
         /$m/ and $test{$m}++;
      }
   }
}
%test=(%once, %test);
for($.=0;$.<=$#lines;) {
   $_=$lines[$.++];

   $n=0; $l="";
   matching: while(1) {
      do{$n=$n{"\$"}; $l=$l{"\$"}} if $n{"\$"} and $. == $#lines+1;
      do{$n=$n{$.}; $l=$l{$.}} if $n{$.};
      last if $n;
      foreach $m (keys %test) {
         do{delete $test{$m};next} if not $once{$m};
         do{$n=$flags{$m}; $l=$l{$n}} if /$m/ and 0==--$test{$m}; # no last to update counters!
      }
      last if $n;
      foreach $m (keys %match) {
         do{$n=$flags{$m};$l=$l{$n};last matching} if /$m/;
      }
      last;
   }
   
   
   if ($n) {
#warn "# match $ARGV:$.:$_";
      $e=$l;
      $l=~s/\{\\n\}/\n/g;
      if    ($n=~/^-/){
         $_="";
      }elsif($n=~/^=/){
         my $old=$_;
         eval $e; die $@ if $@;
         warn "# $ARGV:$. -- $n - $e triggered but no change.\n" if $old eq $_;
      }elsif($n=~/^\+/){
         s/\A/$l\n/
      }elsif($n=~/\+\z/){
         s/\z/\n$l/
      } else {
         $_=$l;
      }
   }

   push @out, $_;
}

$_=join("\n",@out,"");
